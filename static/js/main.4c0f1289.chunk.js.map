{"version":3,"sources":["components/atoms/InputSearch.js","api/apiUtils.js","asset/GlobalData.js","redux/actions/genreActions.js","api/genreApi.js","redux/actions/actionTypes.js","components/commons/NavBar.js","api/movieApi.js","redux/actions/movieActions.js","redux/actions/navbarActions.js","components/atoms/MovieCarousel.js","components/atoms/SectionHeading.js","components/atoms/MovieCard.js","components/molecules/MovieList.js","components/organisms/MovieSection.js","components/pages/Home.js","components/pages/MovieDetails.js","components/pages/TopRatedMovies.js","components/molecules/PaginationBar.js","components/pages/PopularMovies.js","App.js","serviceWorker.js","redux/reducers/movieReducer.js","redux/reducers/navbarReducer.js","redux/reducers/index.js","redux/reducers/genreReducer.js","index.js","redux/configureStore.js"],"names":["InputSearch","className","onSubmit","e","preventDefault","alert","type","placeholder","handleResponse","response","a","status","data","text","error","Error","handleError","console","API_KEY","BASE_URL","sectionNames","COUNTRIES","loadGenres","dispatch","axios","get","then","catch","res","genres","connect","state","length","textColor","navbar","actions","bindActionCreators","genreActions","props","useState","genreDropdownItems","setGenreDropdownItems","countryDropdownItems","setCountryDropdownItems","countries","showNav","show","setShow","isTransparent","setIsTransparent","isOpen","setIsOpen","useEffect","items","map","country","index","push","DropdownItem","key","genre","name","Navbar","fixed","expand","to","NavbarToggler","onClick","Collapse","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","NavItem","getPopularMoviesFromOnePage","pageNumber","url","loadNowPlayingMovies","nowPlayingList","recommendedList","results","i","movie","movies","loadRecommendedMoviesSuccess","loadPopularMovies","getPopularMoviesFuncs","Promise","all","responses","combinedData","movieApi","setTextColor","color","nowPlaying","navbarActions","activeIndex","setActiveIndex","animating","setAnimating","setItems","navbarTextColors","newItems","isImageDark","backdrop_path","src","altText","original_title","caption","overview","next","nextIndex","previous","slides","item","CarouselItem","onExiting","onExited","alt","CarouselCaption","captionText","captionHeader","imageSrc","img","document","createElement","setAttribute","style","display","body","appendChild","onload","canvas","width","this","height","ctx","getContext","drawImage","r","g","b","getImageData","light","dark","x","len","Math","max","Carousel","CarouselIndicators","onClickHandler","newIndex","CarouselControl","direction","directionText","SectionHeading","sectionTitle","poster_path","title","genreIds","genreNames","genreId","id","join","getGenreNamesFromIds","genre_ids","release_date","size","vote_average","MovieList","movieCards","movieList","recommended","recommendedMovies","setTitle","setMovies","sectionName","Container","movieActions","Row","MovieDetails","TopRatedMovies","PaginationBar","moviesPerPage","totalMovies","currentPage","paginate","pageNumbers","setPageNumbers","paginationItems","setPaginationItems","activePage","setActivePage","pageNum","ceil","number","PaginationItem","PaginationLink","href","pageClick","Pagination","aria-label","first","last","lastIndex","popularMovies","setCurrentPage","indexOfLastMovie","indexOfFirstMovie","currentMovies","slice","styles","popularMovieContainer","paginationBar","App","setShowNav","transparentNav","setTransparentNav","scrolledPosition","setSrolledPosition","carouselHeight","setCarouselHeight","handleScroll","currentPosition","window","pageYOffset","querySelector","clientHeight","addEventListener","removeEventListener","path","component","PopularMovies","Home","Boolean","location","hostname","match","initialState","searchMovies","topRateMovies","rootReducer","combineReducers","action","latestMovies","trendingMovies","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","configureStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4c0f1289.chunk.js","sourcesContent":["import React from 'react'\nimport { MdSearch } from \"react-icons/md\"\nimport '../../css/InputSearch.css'\n\nexport default function InputSearch() {\n    const search = (e) => {\n        e.preventDefault()\n        alert(\"Searching...\")\n    }\n\n    return (\n        <form className=\"search-box\" onSubmit={search}>\n            <input type=\"text\" className=\"input\" placeholder=\"Movie name...\"  />\n            <button type=\"submit\" className=\"search-button\">\n                <MdSearch />\n            </button>\n        </form>\n    )\n}\n","export async function handleResponse(response) {\n    if (response.status === 200) {\n        return response.data\n    }\n    if (response.status === 400) {\n      const error = await response.text()\n      throw new Error(error)\n    }\n    throw new Error(\"Network response was not ok.\")\n  }\n  \n  export function handleError(error) {\n    console.error(\"API call failed. \" + error)\n    throw error\n  }\n  ","export const API_KEY = \"323c169d6502f84d4a8a225e5732db2c\"\nexport const BASE_URL = \"https://api.themoviedb.org/3/\"\nexport const GENRE_URL = 'genre/movie/list?api_key='\nexport const NOW_PLAYING_URL = 'movie/now_playing?api_key='\nexport const POPULAR_URL = 'movie/popular?api_key='\nexport const POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w1280'\nexport const MOVIE_IMAGE_URL = 'https://image.tmdb.org/t/p/w500'\n\nexport const sectionNames = {\n    RECOMMENDED_MOVIES: \"Recommend Movies\",\n    LATEST_MOVIES: \"Lastest Movies\",\n    TRENDING_MOVIES: \"Trending Movies\"\n}\n\nexport const COUNTRIES = [\n    \"United States\", \"France\", \"Canada\", \"Italy\", \"United Kingdom\", \"Russia\", \n    \"Korean\", \"Japan\", \"Hongkong\", \"China\", \"South Africa\", \"Brazil\"\n]","import * as genreApi from '../../api/genreApi'\nimport * as actionTypes from './actionTypes'\n\nexport function loadGenresSuccess(genres) {\n    return { type: actionTypes.LOAD_GENRES_SUCCESS, genres }\n}\n\nexport function loadGenres() {\n    return function(dispatch) {\n        return genreApi\n            .getGenres()\n            .then(res => {\n                dispatch(loadGenresSuccess(res.genres))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}","import { handleResponse, handleError } from \"./apiUtils\"\nimport { BASE_URL, GENRE_URL, API_KEY } from '../asset/GlobalData'\nimport axios from 'axios'\n\nexport function getGenres() {\n    let url = BASE_URL + GENRE_URL + API_KEY\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}","export const LOAD_GENRES_SUCCESS = \"LOAD_GENRES_SUCCESS\"\n\nexport const SET_TEXT_COLOR = \"SET_TEXT_COLOR\"\n\n// #region movie actions\nexport const LOAD_NOW_PLAYING_MOVIE_SUCCESS = \"LOAD_NOW_PLAYING_MOVIE_SUCCESS\"\nexport const LOAD_RECOMMENDED_MOVIE_SUCCESS = \"LOAD_RECOMMENDED_MOVIE_SUCCESS\"\nexport const LOAD_POPULAR_MOVIE_SUCCESS = \"LOAD_POPULAR_MOVIE_SUCCESS\"\n\nexport const LOAD_NOW_PLAYING = \"LOAD_NOW_PLAYING\"\nexport const LOAD_LATEST_MOVIES = \"LOAD_LATEST_MOVIES\"\nexport const LOAD_TRENDING_MOVIES = \"LOAD_TRENDING_MOVIES\"\n\n//#endregion","import React, { useState, useEffect } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Navbar, NavbarToggler, Collapse, Nav, NavItem, NavbarBrand,\n    UncontrolledDropdown, DropdownToggle, DropdownItem, DropdownMenu } from 'reactstrap'\nimport '../../css/NavBar.css'\nimport InputSearch from '../atoms/InputSearch'\nimport * as genreActions from '../../redux/actions/genreActions'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { COUNTRIES } from '../../asset/GlobalData'\n\nexport function NavBar(props) {\n    const [genreDropdownItems, setGenreDropdownItems] = useState([])\n    const [countryDropdownItems, setCountryDropdownItems] = useState([])\n    const countries = COUNTRIES\n\n    const [show, setShow] = useState({ ...props.showNav })\n    const [isTransparent, setIsTransparent] = useState({ ...props.isTransparent })\n    const [isOpen, setIsOpen] = useState(false)\n    const toggle = () => setIsOpen(!isOpen)\n\n    useEffect(() => {\n        setShow(props.showNav)\n    }, [props.showNav])\n\n    useEffect(() => {\n        setIsTransparent(props.isTransparent)\n    }, [props.isTransparent])\n\n    useEffect(() => {\n        props.actions.loadGenres()\n        let items = []\n        countries.map((country, index) => {\n            items.push(\n                <DropdownItem key={index}>\n                    {country}\n                </DropdownItem>\n            )\n        })\n        setCountryDropdownItems(items)\n    }, [])\n\n    useEffect(() => {\n        if (props.genres.length > 0) {\n            let items = []\n            props.genres.map((genre, index) => {\n                items.push(\n                    <DropdownItem key={index}>\n                        {genre.name}\n                    </DropdownItem>\n                )\n            })\n            setGenreDropdownItems(items)\n        }\n    }, [props.genres])\n\n    return (\n        <Navbar fixed=\"top\" expand=\"md\" className={ `${show ? 'nav-show' : 'nav-hide'} ${isTransparent ? 'transparent-nav' : 'non-transparent'}`}>\n            <NavLink to=\"/\" className={props.textColor + \" navbar-brand\" } >Home</NavLink>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className={`mr-auto ${props.textColor}`} navbar>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Genre\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                            { genreDropdownItems }\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Country\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                           { countryDropdownItems }\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/toprated\">Top Rated</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/popular\">Popular</NavLink>\n                    </NavItem>\n                </Nav>\n                <NavItem className=\"input-search\">\n                    <InputSearch />\n                </NavItem>\n            </Collapse>\n        </Navbar>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres.length === 0 \n            ? [] \n            : state.genres,\n\n        textColor: state.navbar.textColor\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadGenres: bindActionCreators(genreActions.loadGenres, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)\n","import { handleResponse, handleError } from \"./apiUtils\"\nimport { BASE_URL, NOW_PLAYING_URL, POPULAR_URL, API_KEY } from '../asset/GlobalData'\nimport axios from 'axios'\n\nexport function getNowPlayingMovies() {\n    let url = BASE_URL + NOW_PLAYING_URL + API_KEY + \"&page=1\"\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}\n\nexport function getPopularMovies() { //from 20 pages\n    const getPopularMoviesFuncs = []\n    for (let i = 1; i <= 20; i++) {\n        getPopularMoviesFuncs.push(getPopularMoviesFromOnePage(i))\n    }\n\n    return Promise.all(getPopularMoviesFuncs)\n    .then(function (responses) {\n        const combinedData = []\n        responses.map(res => {\n            if (res.data.results) {\n                combinedData.push(...res.data.results)\n            }\n        })\n        return combinedData\n    })\n    .catch(handleError)\n}\n\nfunction getPopularMoviesFromOnePage(pageNumber) {\n    let url = BASE_URL + POPULAR_URL + API_KEY + `&page=${pageNumber}`\n    return axios.get(url)\n}","import * as movieApi from '../../api/movieApi'\nimport * as actionTypes from './actionTypes'\n\nexport function loadNowPlayingMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_NOW_PLAYING_MOVIE_SUCCESS, movies }\n}\n\nexport function loadRecommendedMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_RECOMMENDED_MOVIE_SUCCESS, movies }\n}\n\nexport function loadPopularMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_POPULAR_MOVIE_SUCCESS, movies }\n}\n\nexport function loadNowPlayingMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getNowPlayingMovies()\n            .then(res => {\n                let nowPlayingList = []\n                let recommendedList = []\n\n                // get 5 movie for movie carousel \n                if (res.results < 0) return\n                if (res.results.length > 5) {\n                    for (let i = 0; i < 5; i++) {\n                        nowPlayingList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        nowPlayingList.push(movie)\n                    }\n                }\n\n                // get 20 movies for recomended movie list\n                if (res.results.length > 20) {\n                    for (let i = 0; i < 20; i++) {\n                        recommendedList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        recommendedList.push(movie)\n                    }\n                }\n\n                dispatch(loadNowPlayingMoviesSuccess(nowPlayingList))\n                dispatch(loadRecommendedMoviesSuccess(recommendedList))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n\nexport function loadPopularMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getPopularMovies()\n            .then(res => {\n                dispatch(loadPopularMoviesSuccess(res))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n","import * as actionTypes from './actionTypes'\n\nexport function setTextColor(color) {\n    return { type: actionTypes.SET_TEXT_COLOR, color }\n}","import React, { useState, useEffect } from 'react'\nimport { Carousel, CarouselItem, CarouselControl, CarouselIndicators, CarouselCaption } from 'reactstrap'\nimport { POSTER_BASE_URL } from '../../asset/GlobalData'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport '../../css/MovieCarousel.css'\n\nexport function MovieCarousel(props) {\n    const [activeIndex, setActiveIndex] = useState(0)\n    const [animating, setAnimating] = useState(false)\n    const [items, setItems] = useState([])\n    const [navbarTextColors, setNavbarTextColor] = useState([])\n\n    useEffect(() => {\n      if (props.nowPlaying) {\n        const newItems = []\n        props.nowPlaying.map((movie, index) => {\n          isImageDark(`${POSTER_BASE_URL}${movie.backdrop_path}`, index)\n          newItems.push({\n            src: `${POSTER_BASE_URL}${movie.backdrop_path}`,\n            altText: movie.original_title,\n            caption: movie.original_title,\n            overview: movie.overview,\n          })\n        })\n        setItems(newItems)\n        // console.log(newItems)\n      }\n    }, [props.nowPlaying])\n\n    useEffect(() => {\n      if (items.length > 0 && navbarTextColors.length > 0) {\n        if (navbarTextColors[activeIndex] !== props.textColor) {\n          if (props.textColor === 'dark') {\n            props.actions.setTextColor('light')\n          } else {\n            props.actions.setTextColor('dark')\n          }\n        } else {\n        }\n      }\n    }, [activeIndex])\n\n    const next = () => {\n        if (animating) return\n        const nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1\n        setActiveIndex(nextIndex)\n    }\n\n    const previous = () => {\n        if (animating) return\n        const nextIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1\n        setActiveIndex(nextIndex)\n    }\n\n    const goToIndex = (newIndex) => {\n        if (animating) return\n        setActiveIndex(newIndex)\n    }\n\n    const slides = items.map((item) => {\n        return (\n          <CarouselItem\n            onExiting={() => setAnimating(true)}\n            onExited={() => setAnimating(false)}\n            key={item.src}\n          >\n            <img src={item.src} alt={item.altText} />\n            <CarouselCaption className={props.textColor} captionText={item.overview} captionHeader={item.caption} />\n          </CarouselItem>\n        )\n    })\n\n    const isImageDark = function(imageSrc, index) {\n      var img = document.createElement(\"img\")\n      img.src = imageSrc\n      img.setAttribute('crossOrigin', '')\n      img.style.display = \"none\"\n      document.body.appendChild(img)\n  \n      var fuzzy = 0.1\n\n      img.onload = function() {\n          var canvas = document.createElement(\"canvas\")\n          canvas.width = this.width\n          canvas.height = this.height\n  \n          var ctx = canvas.getContext(\"2d\")\n          ctx.drawImage(this,0,0)\n  \n          var imageData = ctx.getImageData(0,0,canvas.width,canvas.height)\n          var data = imageData.data\n          var r,g,b, max_rgb\n            var light = 0, dark = 0\n  \n          for(var x = 0, len = data.length; x < len; x+=4) {\n              r = data[x]\n              g = data[x+1]\n              b = data[x+2]\n  \n              max_rgb = Math.max(Math.max(r, g), b)\n              if (max_rgb < 128)\n                  dark++\n              else\n                  light++\n          }\n\n          var dl_diff = ((light - dark) / (this.width * this.height))\n          if (dl_diff + fuzzy < 0) { //dark image\n            const newTextColors = [...navbarTextColors, navbarTextColors[index] = 'light']\n          } else { //light image\n            const newTextColors = [...navbarTextColors, navbarTextColors[index] = 'dark']\n          }\n      }\n  }\n\n  return (\n      <Carousel \n              activeIndex={activeIndex}\n              next={next}\n              previous={previous}\n          >\n\n          <CarouselIndicators items={items} activeIndex={activeIndex} onClickHandler={goToIndex} />\n              {slides}\n          <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous} />\n          <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next} />\n      </Carousel>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n      nowPlaying: state.movies.nowPlaying.length === 0 \n          ? [] \n          : state.movies.nowPlaying,\n      textColor: state.navbar.textColor\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      setTextColor: bindActionCreators(navbarActions.setTextColor, dispatch)\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieCarousel)","import React from 'react'\n\nexport default function SectionHeading(props) {\n    const styles = {\n        sectionTitle: {\n            'margin': '2rem 0 0 0'\n        },\n    }\n\n    return (\n        <div className=\"section-heading\">\n            <h2 className=\"section-title\" style={styles.sectionTitle}>{props.sectionTitle}</h2>\n        </div>\n    )\n}\n","import React from 'react'\nimport { TiInfoLarge, TiStar } from \"react-icons/ti\"\nimport { MOVIE_IMAGE_URL } from '../../asset/GlobalData'\nimport '../../css/MovieCard.css'\nimport { connect } from 'react-redux'\n\nexport function MovieCard(props) {\n    const getGenreNamesFromIds = (genreIds) => {\n        let genreNames = []\n        props.genres.map(genre => {\n            for(let genreId of genreIds) {\n                if (genre.id === genreId) {\n                    genreNames.push(genre.name)\n                }\n            }\n        })\n        genreNames = genreNames.join(', ')\n        return genreNames\n    }\n\n    return (\n        <div className=\"card-container\">\n            <div className=\"image-card\">\n                <img className=\"movie-img\" src={MOVIE_IMAGE_URL + props.movie.poster_path} alt={props.movie.title}/>\n                <div className=\"movie-info\">\n                    <TiInfoLarge color=\"#fff\" />\n                    <div className=\"info-text\">\n                        <h3 className=\"title\">{props.movie.title}</h3>\n                        <p className=\"overview\">{props.movie.overview}</p>\n                        <p className=\"genre\">{\"Genre: \" + getGenreNamesFromIds(props.movie.genre_ids)}</p>\n                        <p className=\"release-date\">{props.movie.release_date}</p>\n                        <p className=\"rate\">\n                            <TiStar color=\"yellow\" size={22} />\n                            {props.movie.vote_average}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres\n    }\n}\n\nexport default connect(mapStateToProps)(MovieCard)\n","import React from 'react'\nimport MovieCard from '../atoms/MovieCard'\n\nexport default function MovieList(props) {\n    const movieCards = props.movieList.map(movie => (\n        <MovieCard key={movie.id} movie={movie}/>\n    ))\n\n    return (\n        <div className=\"movie-list\">\n            { movieCards }\n        </div>\n    )\n}\n","import React, { useState ,useEffect } from 'react'\nimport SectionHeading from '../atoms/SectionHeading'\nimport MovieList from '../molecules/MovieList'\nimport { Container, Row, Col } from 'reactstrap'\n\nimport { sectionNames } from '../../asset/GlobalData'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport '../../css/MovieSection.css'\n\nexport function MovieSection(props) {\n    const [title, setTitle] = useState(\"\")\n    const [movies, setMovies] = useState([])\n\n    useEffect(() => {\n        setTitle(props.sectionName)\n        switch(props.sectionName) {\n            case sectionNames.RECOMMENDED_MOVIES:\n                setMovies(props.recommended)\n            break\n\n            case sectionNames.LATEST_MOVIES:\n            break\n\n            case sectionNames.TRENDING_MOVIES:\n            break\n        }\n    }, [props.recommended])\n\n    return (\n        <Container className=\"movie-section\">\n            <div>\n                <SectionHeading sectionTitle={title}/>\n            </div>\n            <div>\n                <MovieList movieList={movies} />\n            </div>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        recommended: state.movies.recommendedMovies.length === 0 \n            ? [] \n            : state.movies.recommendedMovies\n    }\n}\n  \nfunction mapDispatchToProps(dispatch) {\nreturn {\n    actions: {\n\n    }\n}\n}\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(MovieSection)","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport { sectionNames } from '../../asset/GlobalData'\nimport MovieCarousel from '../atoms/MovieCarousel'\nimport MovieSection from '../organisms/MovieSection'\nimport { Container, Row } from 'reactstrap'\nimport '../../css/Home.css'\n\nexport function Home(props) {\n    useEffect(() => {\n        props.actions.loadNowPlayingMovies()\n    }, [])\n\n    return (\n        <Container>\n            <Row>\n                <MovieCarousel />\n            </Row>\n            <Row>\n                <MovieSection sectionName={sectionNames.RECOMMENDED_MOVIES} />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        nowPlaying: state.movies.nowPlaying.length === 0 \n            ? [] \n            : state.movies.nowPlaying\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadNowPlayingMovies: bindActionCreators(movieActions.loadNowPlayingMovies, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React from 'react'\n\nexport default function MovieDetails() {\n    return (\n        <div>\n            Movie Detail\n        </div>\n    )\n}\n","import React from 'react'\nimport { Container } from 'reactstrap'\n\nexport default function TopRatedMovies\n() {\n    return (\n        <Container className=\"pages\">\n            Lastest movie\n        </Container>\n    )\n}\n","import React, { useState, useEffect } from \"react\"\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\"\nimport '../../css/PaginationBar.css'\n\nexport default function PaginationBar({ moviesPerPage, totalMovies, currentPage, paginate }) {\n    const [pageNumbers, setPageNumbers] = useState(0)\n    const [paginationItems, setPaginationItems] = useState([])\n    const [activePage, setActivePage] = useState(currentPage)\n\n    const firstPageClick = () => {\n        paginate(1)\n        setActivePage(1)\n    }\n\n    const prePageClick = () => {\n        if (currentPage > 1) {\n            paginate(currentPage - 1)\n            setActivePage(currentPage - 1)\n        }\n    }\n\n    const nextPageClick = () => {\n        if (currentPage < pageNumbers.length) {\n            paginate(currentPage + 1)\n            setActivePage(currentPage + 1)\n        }\n    }\n\n    const lastPageClick = () => {\n        const lastIndex = pageNumbers.length\n        paginate(lastIndex)\n        setActivePage(lastIndex)\n    }\n\n    const pageClick = (number) => {\n        paginate(number)\n        setActivePage(number)\n    }\n\n    useEffect(() => {\n        setActivePage(currentPage)\n    }, [currentPage])\n\n    useEffect(() => {\n        let pageNum = []\n        for (let i = 1; i <= Math.ceil(totalMovies / moviesPerPage); i++) {\n            pageNum.push(i)\n        }\n        setPageNumbers(pageNum)\n    }, [totalMovies])\n\n    useEffect(() => {\n        if (pageNumbers.length > 0) {\n            const items = pageNumbers.map(number => (\n                <PaginationItem key={number} className={activePage === number ? 'active-page' : ''}>\n                    <PaginationLink previous href=\"#popular-movies\" onClick={()=> pageClick(number)}>{number}</PaginationLink>\n                </PaginationItem>\n            ))\n            setPaginationItems(items)\n        } else {\n            setPaginationItems([])\n        }\n    }, [pageNumbers, activePage])\n\n    return (\n        <Pagination aria-label=\"Page navigation example\">\n            <PaginationItem>\n                <PaginationLink first href=\"#popular-movies\" onClick={firstPageClick} />\n            </PaginationItem>\n            <PaginationItem>\n                <PaginationLink previous href=\"#popular-movies\" onClick={prePageClick} />\n            </PaginationItem>\n                {paginationItems}\n            <PaginationItem>\n                <PaginationLink next href=\"#popular-movies\" onClick={nextPageClick} />\n            </PaginationItem>\n            <PaginationItem>\n                <PaginationLink last href=\"#popular-movies\" onClick={lastPageClick} />\n            </PaginationItem>\n        </Pagination>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport { Container, Row, Col } from 'reactstrap'\n\nimport MovieList from '../molecules/MovieList'\nimport PaginationBar from '../molecules/PaginationBar'\n\nexport function PopularMovies(props) {\n    const [movies, setMovies] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const [moviesPerPage, setMoviesPerPage] = useState(40)\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = movies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        popularMovieContainer: {\n            'margin': '0 1rem'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    useEffect(() => {\n        if (movies.length === 0) {\n            props.actions.loadPopularMovies()\n        }\n    }, [])\n\n\n    useEffect(() => {\n        setMovies(props.popularMovies)\n    }, [props.popularMovies])\n\n    return (\n        <Container>\n            <Row className=\"filter-bar\">\n\n            </Row>\n            <Row className=\"popular-movies\" id=\"popular-movies\">\n                <div className=\"popular-movie-list\" style={styles.popularMovieContainer}>\n                    <MovieList movieList={currentMovies} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                <PaginationBar moviesPerPage={moviesPerPage} totalMovies={movies.length} currentPage={currentPage} paginate={paginate} />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        popularMovies: state.movies.popularMovies.length === 0 \n            ? [] \n            : state.movies.popularMovies\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadPopularMovies: bindActionCreators(movieActions.loadPopularMovies, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PopularMovies)","import React, { useState, useEffect } from 'react'\nimport './css/App.css'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Navbar from './components/commons/NavBar'\nimport Home from './components/pages/Home'\nimport MovieDetails from './components/pages/MovieDetails'\nimport TopRatedMovies from './components/pages/TopRatedMovies'\nimport PopularMovies from './components/pages/PopularMovies'\n\n// axios.defaults.baseURL = 'https://...'\nfunction App() {\n  const [showNav, setShowNav] = useState(true)\n  const [transparentNav, setTransparentNav] = useState(true)\n  const [scrolledPosition, setSrolledPosition] = useState(0)\n  const [carouselHeight, setCarouselHeight] = useState(0)\n\n  const handleScroll = () => {\n    const currentPosition = window.pageYOffset\n\n    if (carouselHeight <= 0 ) {\n      if (document.querySelector('.carousel')) {\n        const height = document.querySelector('.carousel').clientHeight\n        setCarouselHeight(height)\n      }\n    }\n\n    // show/hide navbar when scroll\n    if (scrolledPosition > currentPosition) {\n      setShowNav(true)\n    } else {\n      setShowNav(false)\n    }\n\n    // make change navbar background when carousel is not in view port\n    if (currentPosition > carouselHeight) {\n      setTransparentNav(false)\n    } else {\n      setTransparentNav(true)\n    }\n\n    setSrolledPosition(currentPosition)\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll)\n    }\n  })\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar showNav={showNav} isTransparent={transparentNav} />\n        <Switch>\n          <Route path=\"/popular\" component={PopularMovies} />\n          <Route path=\"/toprated\" component={TopRatedMovies} />\n          <Route path=\"/details\" component={MovieDetails} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    nowPlaying: [],\n    searchMovies: [],\n    recommendedMovies: [],\n    topRateMovies: [],\n    popularMovies: [],\n}\n\nexport default function movieReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.LOAD_NOW_PLAYING_MOVIE_SUCCESS: \n            return { ...state, nowPlaying: action.movies }\n        case actionTypes.LOAD_RECOMMENDED_MOVIE_SUCCESS:\n            return { ...state, recommendedMovies: action.movies }\n        case actionTypes.LOAD_POPULAR_MOVIE_SUCCESS:\n            return { ...state, popularMovies: action.movies }\n        case actionTypes.LOAD_LATEST_MOVIES:\n            return { ...state, latestMovies: action.latestMovies }\n        case actionTypes.LOAD_TRENDING_MOVIES:\n            return { ...state, trendingMovies: action.trendingMovies }\n        default:\n            return state\n    }\n}","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    textColor: 'dark'\n}\n\nexport default function navbarReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.SET_TEXT_COLOR: \n            return { textColor: action.color }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport genres from './genreReducer'\nimport movies from './movieReducer'\nimport navbar from './navbarReducer'\n\nconst rootReducer = combineReducers({\n    genres,\n    movies,\n    navbar\n})\n\nexport default rootReducer","import * as actionTypes from '../actions/actionTypes'\n\nexport default function genreReducer(state = [], action) {\n    switch(action.type) {\n        case actionTypes.LOAD_GENRES_SUCCESS: \n            return action.genres\n        default:\n            return state\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './redux/configureStore'\nimport { Provider as ReduxProvider } from 'react-redux'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ReduxProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, compose } from 'redux'\nimport rootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport { applyMiddleware } from 'redux'\n\nexport default function configureStore(initialState) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n    return createStore(\n        rootReducer,\n        initialState,\n        composeEnhancers(applyMiddleware(thunk))\n    )\n} "],"sourceRoot":""}
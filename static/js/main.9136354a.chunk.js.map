{"version":3,"sources":["components/atoms/InputSearch.js","api/apiUtils.js","asset/GlobalData.js","redux/actions/genreActions.js","api/genreApi.js","redux/actions/actionTypes.js","components/commons/NavBar.js","api/movieApi.js","redux/actions/movieActions.js","redux/actions/navbarActions.js","components/atoms/MovieCarousel.js","components/atoms/SectionHeading.js","components/atoms/MovieCard.js","components/molecules/MovieList.js","components/organisms/MovieSection.js","components/pages/Home.js","components/molecules/CastInfoCard.js","components/pages/MovieDetails.js","asset/FilterFunctions.js","redux/actions/filterbarActions.js","components/molecules/FilterBar.js","components/molecules/PaginationBar.js","components/pages/TopRatedMovies.js","components/pages/PopularMovies.js","components/pages/SearchPage.js","App.js","serviceWorker.js","redux/reducers/movieReducer.js","redux/reducers/navbarReducer.js","redux/reducers/filterbarReducer.js","redux/reducers/index.js","redux/reducers/genreReducer.js","index.js","redux/configureStore.js"],"names":["InputSearch","history","useHistory","useState","searchString","setSearchString","className","onSubmit","e","preventDefault","length","push","alert","type","placeholder","value","onChange","event","target","handleResponse","response","a","status","data","text","error","Error","handleError","console","API_KEY","BASE_URL","MOVIE_IMAGE_URL","sectionNames","COUNTRIES","YEARS","SORT_OPTIONS","loadGenres","dispatch","axios","get","then","catch","res","genres","connect","state","textColor","navbar","actions","bindActionCreators","genreActions","props","genreDropdownItems","setGenreDropdownItems","countryDropdownItems","setCountryDropdownItems","countries","showNav","show","setShow","isTransparent","setIsTransparent","isOpen","setIsOpen","useEffect","items","map","country","index","DropdownItem","key","genre","name","Navbar","fixed","dark","expand","to","NavbarToggler","onClick","Collapse","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","NavItem","getPopularMoviesFromOnePage","pageNumber","url","getTopRatedMoviesFromOnePage","loadNowPlayingMovies","nowPlayingList","recommendedList","results","i","movie","movies","loadRecommendedMoviesSuccess","loadUpcomingMovies","upcomingList","loadPopularMovies","getPopularMoviesFuncs","Promise","all","responses","combinedData","movieApi","loadTopRatedMovies","getTopRatedMoviesFuncs","setHomepage","nowPlaying","activeIndex","setActiveIndex","animating","setAnimating","setItems","newItems","src","backdrop_path","altText","original_title","caption","overview","next","nextIndex","previous","slides","item","CarouselItem","onExiting","onExited","alt","CarouselCaption","captionText","captionHeader","Carousel","CarouselIndicators","onClickHandler","newIndex","CarouselControl","direction","directionText","SectionHeading","sectionTitle","id","poster_path","title","color","genreIds","genreNames","genreId","join","getGenreNamesFromIds","genre_ids","release_date","size","vote_average","MovieList","movieCards","movieList","recommended","recommendedMovies","upcoming","upcomingMovies","setTitle","setMovies","sectionName","Container","movieActions","setHomePage","navbarActions","Row","style","CastInfoCard","styles","cardContainer","cardImage","cardText","setMovie","setGenres","movieCredits","setMovieCredits","castInfoCards","setCastInfoCards","trailer","setTrailer","movieId","match","params","getMovieDetails","getMovieCredits","officialTrailer","find","availableTrailer","getTrailers","movieGenre","getGenreNames","log","cast","slice","credit_id","profile_path","Col","sm","xs","md","lg","runtime","vote_count","crew","crewMember","job","getDirectorName","getGenreIdsFromNames","allGenres","genreName","compareByDate","b","Date","compareByName","localeCompare","compareByRate","compareByView","popularity","filterGenre","genreConditions","every","condition","includes","filterYear","yearConditions","substring","filterCountry","countryConditions","original_language","languageCodes","countryName","getLanguageCode","getLanguageCodesFromCountryNames","sortMovies","sortType","sort","setFilterOptions","options","filterOptions","filterbar","filterbarActions","years","sorts","yearDropdownItems","setYearDropdownItems","sortDropdownItems","setSortDropdownItems","genreCheckBoxsState","setGenreCheckBoxsState","yearCheckBoxsState","setYearCheckBoxsState","countryCheckBoxsState","setCountryCheckBoxsState","sortCheckBoxsState","setSortCheckBoxsState","genreValueText","setGenreValueText","yearValueText","setYearValueText","countryValueText","setCountryValueText","sortValueText","setSortValueText","hanldeGenreCheckBoxsChange","checked","prevState","hanldeYearCheckBoxsChange","hanldeCountryCheckBoxsChange","hanldeSortCheckBoxsChange","getChecked","obj","Object","keys","getObjLength","values","reduce","count","getCheckedValue","getCheckedArray","checkedArray","entries","countryItems","yearItems","sortItems","year","genresChecked","checkedGenres","yearsChecked","checkedYears","countryChecked","checkedCountries","sortValue","Button","PaginationBar","moviesPerPage","totalMovies","currentPage","paginate","link","pageNumbers","setPageNumbers","paginationItems","setPaginationItems","activePage","setActivePage","pageNum","Math","ceil","number","PaginationItem","PaginationLink","href","pageClick","Pagination","aria-label","first","last","lastIndex","topRatedMovies","filteredMovies","setFilteredMovies","setCurrentPage","indexOfLastMovie","indexOfFirstMovie","currentMovies","pageContainer","topRatedMovieContainer","paginationBar","filterFunctions","filteredMovieList","filter","bind","popularMovies","popularMovieContainer","searchMovieContainer","searchTitle","getSearchMovies","getSearchMoviesFuncs","getSearchMoviesFromOnePage","location","searchQuery","homepage","setShowNav","transparentNav","setTransparentNav","scrolledPosition","setSrolledPosition","carouselHeight","setCarouselHeight","handleScroll","currentPosition","window","pageYOffset","document","querySelector","height","clientHeight","addEventListener","removeEventListener","path","component","PopularMovies","TopRatedMovies","MovieDetails","SearchPage","Home","Boolean","hostname","initialState","searchMovies","rootReducer","combineReducers","action","latestMovies","trendingMovies","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","configureStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9136354a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { MdSearch } from \"react-icons/md\"\nimport '../../css/InputSearch.css'\nimport { useHistory } from 'react-router-dom'\n\nexport default function InputSearch() {\n    const history = useHistory()\n    const [searchString, setSearchString] = useState('')\n    const search = (e) => {\n        e.preventDefault()\n        if (searchString.length > 0) {\n            history.push('/search', {searchString: searchString})\n        } else {\n            alert('Please input search key words')\n        }\n    }\n\n    const handleChange = (event) => setSearchString(event.target.value)\n\n    return (\n        <form className=\"search-box\" onSubmit={search}>\n            <input type=\"text\" className=\"input\" placeholder=\"Movie name...\" value={searchString} onChange={handleChange} />\n            <button type=\"submit\" className=\"search-button\">\n                <MdSearch />\n            </button>\n        </form>\n    )\n}\n","export async function handleResponse(response) {\n    if (response.status === 200) {\n        return response.data\n    }\n    if (response.status === 400) {\n      const error = await response.text()\n      throw new Error(error)\n    }\n    throw new Error(\"Network response was not ok.\")\n  }\n  \n  export function handleError(error) {\n    console.error(\"API call failed. \" + error)\n    throw error\n  }\n  ","export const API_KEY = \"323c169d6502f84d4a8a225e5732db2c\"\nexport const BASE_URL = \"https://api.themoviedb.org/3/\"\nexport const GENRE_URL = 'genre/movie/list?api_key='\nexport const NOW_PLAYING_URL = 'movie/now_playing?api_key='\nexport const UPCOMING_URL = \"movie/upcoming?api_key=\"\nexport const POPULAR_URL = 'movie/popular?api_key='\nexport const TOP_RATED_URL = 'movie/top_rated?api_key='\nexport const SEARCH_URL = 'search/movie?api_key='\nexport const DETAILS_URL = 'movie/'\nexport const POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w1280'\nexport const MOVIE_IMAGE_URL = 'https://image.tmdb.org/t/p/w500'\nexport const YOUTUBE_VIDEO_URL = 'https://www.youtube.com/embed/'\n\nexport const sectionNames = {\n    RECOMMENDED_MOVIES: \"Recommend Movies\",\n    UPCOMING_MOVIES: \"Upcoming Movies\",\n    TRENDING_MOVIES: \"Trending Movies\"\n}\n\nexport const COUNTRIES = [\n    \"United States\", \"France\", \"Canada\", \"Italy\", \"United Kingdom\", \"Russia\", \n    \"Korean\", \"Japan\", \"Hongkong\", \"China\", \"India\", \"Brazil\"\n]\n\nexport const YEARS = [\n    2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2011, 2010\n]\n\nexport const SORT_OPTIONS = [\n    \"Default\", \"Release Date\", \"Name\", \"Rate\", \"Most Watched\"\n]\n\nexport const LANGUAGES = [\n    \"en\", \"fr\", \"it\", \"ru\", \"ko\", \"ja\", \"zh\"\n]","import * as genreApi from '../../api/genreApi'\nimport * as actionTypes from './actionTypes'\n\nexport function loadGenresSuccess(genres) {\n    return { type: actionTypes.LOAD_GENRES_SUCCESS, genres }\n}\n\nexport function loadGenres() {\n    return function(dispatch) {\n        return genreApi\n            .getGenres()\n            .then(res => {\n                dispatch(loadGenresSuccess(res.genres))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}","import { handleResponse, handleError } from \"./apiUtils\"\nimport { BASE_URL, GENRE_URL, API_KEY } from '../asset/GlobalData'\nimport axios from 'axios'\n\nexport function getGenres() {\n    let url = BASE_URL + GENRE_URL + API_KEY\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}","export const LOAD_GENRES_SUCCESS = \"LOAD_GENRES_SUCCESS\"\n\nexport const SET_HOME_PAGE = \"SET_HOME_PAGE\"\n\nexport const SET_FILTER_OPTION = \"SET_FILTER_OPTION\"\n\n// #region movie actions\n\nexport const LOAD_NOW_PLAYING_MOVIE_SUCCESS = \"LOAD_NOW_PLAYING_MOVIE_SUCCESS\"\nexport const LOAD_RECOMMENDED_MOVIE_SUCCESS = \"LOAD_RECOMMENDED_MOVIE_SUCCESS\"\nexport const LOAD_UPCOMING_MOVIE_SUCCESS = \"LOAD_UPCOMING_MOVIE_SUCCESS\"\nexport const LOAD_POPULAR_MOVIE_SUCCESS = \"LOAD_POPULAR_MOVIE_SUCCESS\"\nexport const LOAD_TOP_RATED_MOVIE_SUCCESS = \"LOAD_TOP_RATED_MOVIE_SUCCESS\"\n\nexport const LOAD_NOW_PLAYING = \"LOAD_NOW_PLAYING\"\nexport const LOAD_LATEST_MOVIES = \"LOAD_LATEST_MOVIES\"\nexport const LOAD_TRENDING_MOVIES = \"LOAD_TRENDING_MOVIES\"\n\n//#endregion","import React, { useState, useEffect } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Navbar, NavbarToggler, Collapse, Nav, NavItem,\n    UncontrolledDropdown, DropdownToggle, DropdownItem, DropdownMenu } from 'reactstrap'\nimport '../../css/NavBar.css'\nimport InputSearch from '../atoms/InputSearch'\nimport * as genreActions from '../../redux/actions/genreActions'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { COUNTRIES } from '../../asset/GlobalData'\n\nexport function NavBar(props) {\n    const [genreDropdownItems, setGenreDropdownItems] = useState([])\n    const [countryDropdownItems, setCountryDropdownItems] = useState([])\n    const countries = COUNTRIES\n\n    const [show, setShow] = useState({ ...props.showNav })\n    const [isTransparent, setIsTransparent] = useState({ ...props.isTransparent })\n    const [isOpen, setIsOpen] = useState(false)\n    const toggle = () => setIsOpen(!isOpen)\n\n    useEffect(() => {\n        setShow(props.showNav)\n    }, [props.showNav])\n\n    useEffect(() => {\n        setIsTransparent(props.isTransparent)\n    }, [props.isTransparent])\n\n    useEffect(() => {\n        props.actions.loadGenres()\n        let items = []\n        countries.map((country, index) => {\n            items.push(\n                <DropdownItem key={index}>\n                    {country}\n                </DropdownItem>\n            )\n            return null\n        })\n        setCountryDropdownItems(items)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (props.genres.length > 0) {\n            let items = []\n            props.genres.map((genre, index) => {\n                items.push(\n                    <DropdownItem key={index}>\n                        {genre.name}\n                    </DropdownItem>\n                )\n                return null\n            })\n            setGenreDropdownItems(items)\n        }\n    }, [props.genres])\n\n    return (\n        <Navbar fixed=\"top\" dark expand=\"md\" \n            className={ `${show ? 'nav-show' : 'nav-hide'} ${isTransparent ? 'transparent-nav' : 'non-transparent'}`}\n        >\n            <NavLink to=\"/\" className=\"navbar-brand\" >Home</NavLink>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"mr-auto\" navbar>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Genre\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                            { genreDropdownItems }\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Country\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                           { countryDropdownItems }\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/toprated\">Top Rated</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/popular\">Popular</NavLink>\n                    </NavItem>\n                </Nav>\n                <NavItem className=\"input-search\">\n                    <InputSearch />\n                </NavItem>\n            </Collapse>\n        </Navbar>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres.length === 0 \n            ? [] \n            : state.genres,\n\n        textColor: state.navbar.textColor,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadGenres: bindActionCreators(genreActions.loadGenres, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)\n","import { handleResponse, handleError } from \"./apiUtils\"\nimport { BASE_URL, NOW_PLAYING_URL, UPCOMING_URL, POPULAR_URL, TOP_RATED_URL, API_KEY } from '../asset/GlobalData'\nimport axios from 'axios'\n\nexport function getNowPlayingMovies() {\n    let url = BASE_URL + NOW_PLAYING_URL + API_KEY + \"&page=1\"\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}\n\nexport function getUpcomingMovies() {\n    let url = BASE_URL + UPCOMING_URL + API_KEY + \"&page=1\"\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}\n\nexport function getPopularMovies() { //from 20 pages\n    const getPopularMoviesFuncs = []\n    for (let i = 1; i <= 20; i++) {\n        getPopularMoviesFuncs.push(getPopularMoviesFromOnePage(i))\n    }\n\n    return Promise.all(getPopularMoviesFuncs)\n    .then(function (responses) {\n        const combinedData = []\n        responses.map(res => {\n            if (res.data.results) {\n                combinedData.push(...res.data.results)\n            }\n            return null\n        })\n        return combinedData\n    })\n    .catch(handleError)\n}\n\nfunction getPopularMoviesFromOnePage(pageNumber) {\n    let url = BASE_URL + POPULAR_URL + API_KEY + `&page=${pageNumber}`\n    return axios.get(url)\n}\n\nexport function getTopRatedMovies() {\n    const getTopRatedMoviesFuncs = []\n    for (let i = 1; i <= 20; i++) {\n        getTopRatedMoviesFuncs.push(getTopRatedMoviesFromOnePage(i))\n    }\n\n    return Promise.all(getTopRatedMoviesFuncs)\n    .then(function (responses) {\n        const combinedData = []\n        responses.map(res => {\n            if (res.data.results) {\n                combinedData.push(...res.data.results)\n            }\n            return null\n        })\n        return combinedData\n    })\n    .catch(handleError)\n}\n\nfunction getTopRatedMoviesFromOnePage(pageNumber) {\n    let url = BASE_URL + TOP_RATED_URL + API_KEY + `&page=${pageNumber}`\n    return axios.get(url)\n}","import * as movieApi from '../../api/movieApi'\nimport * as actionTypes from './actionTypes'\n\nexport function loadNowPlayingMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_NOW_PLAYING_MOVIE_SUCCESS, movies }\n}\n\nexport function loadRecommendedMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_RECOMMENDED_MOVIE_SUCCESS, movies }\n}\n\nexport function loadUpcomingMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_UPCOMING_MOVIE_SUCCESS, movies}\n}\n\nexport function loadPopularMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_POPULAR_MOVIE_SUCCESS, movies }\n}\n\nexport function loadTopRatedMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_TOP_RATED_MOVIE_SUCCESS, movies }\n}\n\nexport function loadNowPlayingMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getNowPlayingMovies()\n            .then(res => {\n                let nowPlayingList = []\n                let recommendedList = []\n\n                // get 5 movie for movie carousel \n                if (res.results < 0) return\n                if (res.results.length > 5) {\n                    for (let i = 0; i < 5; i++) {\n                        nowPlayingList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        nowPlayingList.push(movie)\n                    }\n                }\n\n                // get 20 movies for recomended movie list\n                if (res.results.length > 20) {\n                    for (let i = 0; i < 20; i++) {\n                        recommendedList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        recommendedList.push(movie)\n                    }\n                }\n\n                dispatch(loadNowPlayingMoviesSuccess(nowPlayingList))\n                dispatch(loadRecommendedMoviesSuccess(recommendedList))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n\nexport function loadUpcomingMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getUpcomingMovies()\n            .then(res => {\n                let upcomingList = [] \n                if (res.results < 0) return\n                if (res.results.length > 20) {\n                    for (let i = 0; i < 20; i++) {\n                        upcomingList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        upcomingList.push(movie)\n                    }\n                }\n\n                dispatch(loadUpcomingMoviesSuccess(upcomingList))\n            })\n    }\n}\n\nexport function loadPopularMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getPopularMovies()\n            .then(res => {\n                dispatch(loadPopularMoviesSuccess(res))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n\nexport function loadTopRatedMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getTopRatedMovies()\n            .then(res => {\n                dispatch(loadTopRatedMoviesSuccess(res))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n","import * as actionTypes from './actionTypes'\n\nexport function setHomepage(value) {\n    return { type: actionTypes.SET_HOME_PAGE, value }\n}","import React, { useState, useEffect } from 'react'\nimport { Carousel, CarouselItem, CarouselControl, CarouselIndicators, CarouselCaption } from 'reactstrap'\nimport { POSTER_BASE_URL } from '../../asset/GlobalData'\nimport { connect } from 'react-redux'\nimport '../../css/MovieCarousel.css'\n\nexport function MovieCarousel(props) {\n    const [activeIndex, setActiveIndex] = useState(0)\n    const [animating, setAnimating] = useState(false)\n    const [items, setItems] = useState([])\n\n    useEffect(() => {\n      if (props.nowPlaying) {\n        const newItems = []\n        props.nowPlaying.map(movie => {\n          // isImageDark(`${POSTER_BASE_URL}${movie.backdrop_path}`, index)\n          newItems.push({\n            src: `${POSTER_BASE_URL}${movie.backdrop_path}`,\n            altText: movie.original_title,\n            caption: movie.original_title,\n            overview: movie.overview,\n          })\n          return null\n        })\n        setItems(newItems)\n      }\n    }, [props.nowPlaying])\n\n    const next = () => {\n        if (animating) return\n        const nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1\n        setActiveIndex(nextIndex)\n    }\n\n    const previous = () => {\n        if (animating) return\n        const nextIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1\n        setActiveIndex(nextIndex)\n    }\n\n    const goToIndex = (newIndex) => {\n        if (animating) return\n        setActiveIndex(newIndex)\n    }\n\n    const slides = items.map((item) => {\n        return (\n          <CarouselItem\n            onExiting={() => setAnimating(true)}\n            onExited={() => setAnimating(false)}\n            key={item.src}\n          >\n            <img src={item.src} alt={item.altText} />\n            <CarouselCaption className={props.textColor} captionText={item.overview} captionHeader={item.caption} />\n          </CarouselItem>\n        )\n    })\n\n  //   const isImageDark = function(imageSrc, index) {\n  //     var img = document.createElement(\"img\")\n  //     img.src = imageSrc\n  //     img.setAttribute('crossOrigin', '')\n  //     img.style.display = \"none\"\n  //     document.body.appendChild(img)\n  \n  //     var fuzzy = 0.1\n\n  //     img.onload = function() {\n  //         var canvas = document.createElement(\"canvas\")\n  //         canvas.width = this.width\n  //         canvas.height = this.height\n  \n  //         var ctx = canvas.getContext(\"2d\")\n  //         ctx.drawImage(this,0,0)\n  \n  //         var imageData = ctx.getImageData(0,0,canvas.width,canvas.height)\n  //         var data = imageData.data\n  //         var r,g,b, max_rgb\n  //           var light = 0, dark = 0\n  \n  //         for(var x = 0, len = data.length; x < len; x+=4) {\n  //             r = data[x]\n  //             g = data[x+1]\n  //             b = data[x+2]\n  \n  //             max_rgb = Math.max(Math.max(r, g), b)\n  //             if (max_rgb < 128)\n  //                 dark++\n  //             else\n  //                 light++\n  //         }\n\n  //         var dl_diff = ((light - dark) / (this.width * this.height))\n  //         if (dl_diff + fuzzy < 0) { //dark image\n  //           const newTextColors = [...navbarTextColors, navbarTextColors[index] = 'light']\n  //         } else { //light image\n  //           const newTextColors = [...navbarTextColors, navbarTextColors[index] = 'dark']\n  //         }\n  //     }\n  // }\n\n  return (\n      <Carousel \n              activeIndex={activeIndex}\n              next={next}\n              previous={previous}\n          >\n\n          <CarouselIndicators items={items} activeIndex={activeIndex} onClickHandler={goToIndex} />\n              {slides}\n          <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous} />\n          <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next} />\n      </Carousel>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n      nowPlaying: state.movies.nowPlaying.length === 0 \n          ? [] \n          : state.movies.nowPlaying,\n  }\n}\n\nexport default connect(mapStateToProps)(MovieCarousel)","import React from 'react'\n\nexport default function SectionHeading(props) {\n    return (\n        <div className=\"section-heading\">\n            <h2 className=\"section-title\">{props.sectionTitle}</h2>\n        </div>\n    )\n}\n","import React from 'react'\nimport { TiInfoLarge, TiStar } from \"react-icons/ti\"\nimport { MOVIE_IMAGE_URL } from '../../asset/GlobalData'\nimport '../../css/MovieCard.css'\nimport { connect } from 'react-redux'\nimport { Link } from \"react-router-dom\"\n\nexport function MovieCard(props) {\n    const getGenreNamesFromIds = (genreIds) => {\n        let genreNames = []\n        props.genres.map(genre => {\n            for(let genreId of genreIds) {\n                if (genre.id === genreId) {\n                    genreNames.push(genre.name)\n                }\n            }\n            return null\n        })\n        genreNames = genreNames.join(', ')\n        return genreNames\n    }\n\n    return (\n            <div className=\"card-container\">\n                <div className=\"image-card\">\n                    <Link to={`details/${props.movie.id}`} >\n                        <img className=\"movie-img\" src={MOVIE_IMAGE_URL + props.movie.poster_path} alt={props.movie.title}/>\n                    </Link>\n                    <div className=\"movie-info\">\n                        <TiInfoLarge color=\"#fff\" />\n                        <div className=\"info-text\">\n                            <h3 className=\"title\">{props.movie.title}</h3>\n                            <p className=\"overview\">{props.movie.overview}</p>\n                            <p className=\"genre\">{\"Genre: \" + getGenreNamesFromIds(props.movie.genre_ids)}</p>\n                            <p className=\"release-date\">{props.movie.release_date}</p>\n                            <p className=\"rate\">\n                                <TiStar color=\"yellow\" size={22} />\n                                {props.movie.vote_average}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres\n    }\n}\n\nexport default connect(mapStateToProps)(MovieCard)\n","import React from 'react'\nimport MovieCard from '../atoms/MovieCard'\n\nexport default function MovieList(props) {\n    const movieCards = props.movieList.map(movie => (\n        <MovieCard key={movie.id} movie={movie}/>\n    ))\n\n    return (\n        <div className=\"movie-list\">\n            { movieCards }\n        </div>\n    )\n}\n","import React, { useState ,useEffect } from 'react'\nimport SectionHeading from '../atoms/SectionHeading'\nimport MovieList from '../molecules/MovieList'\nimport { Container } from 'reactstrap'\nimport { sectionNames } from '../../asset/GlobalData'\nimport { connect } from 'react-redux'\nimport '../../css/MovieSection.css'\n\nexport function MovieSection(props) {\n    const [title, setTitle] = useState(\"\")\n    const [movies, setMovies] = useState([])\n\n    useEffect(() => {\n        setTitle(props.sectionName)\n        switch(props.sectionName) {\n            case sectionNames.RECOMMENDED_MOVIES:\n                setMovies(props.recommended)\n            break\n\n            case sectionNames.UPCOMING_MOVIES:\n                setMovies(props.upcoming)\n                break\n\n            case sectionNames.TRENDING_MOVIES:\n                break\n\n            default:\n                break\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.recommended, props.upcoming ])\n\n    return (\n        <Container className=\"movie-section\">\n            <div>\n                <SectionHeading sectionTitle={title}/>\n            </div>\n            <div>\n                <MovieList movieList={movies} />\n            </div>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        recommended: state.movies.recommendedMovies,\n        upcoming: state.movies.upcomingMovies\n    }\n}\n  \nfunction mapDispatchToProps(dispatch) {\nreturn {\n    actions: {\n\n    }\n}\n}\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(MovieSection)","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport { sectionNames } from '../../asset/GlobalData'\nimport MovieCarousel from '../atoms/MovieCarousel'\nimport MovieSection from '../organisms/MovieSection'\nimport { Container, Row } from 'reactstrap'\nimport '../../css/Home.css'\n\nexport function Home(props) {\n    const styles = {\n        recommendedSection: {\n            'margin-top': '2rem'\n        }\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(true)\n        props.actions.loadNowPlayingMovies()\n        props.actions.loadUpcomingMovies()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <Container>\n            <Row>\n                <MovieCarousel />\n            </Row>\n            <Row style={styles.recommendedSection}>\n                <MovieSection sectionName={sectionNames.RECOMMENDED_MOVIES} />\n            </Row>\n            <Row>\n                <MovieSection sectionName={sectionNames.UPCOMING_MOVIES} />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        \n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadNowPlayingMovies: bindActionCreators(movieActions.loadNowPlayingMovies, dispatch),\n            loadUpcomingMovies: bindActionCreators(movieActions.loadUpcomingMovies, dispatch),\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React from 'react'\nimport { MOVIE_IMAGE_URL } from '../../asset/GlobalData'\n\nexport default function CastInfoCard({ name, url }) {\n    const styles = {\n        cardContainer: {\n            'maxWidth': '60px',\n            'marginRight': '1rem'\n        },\n        cardImage: {\n            'width': '100%',\n        },\n        cardText: {\n            'textAlign': 'center'\n        }\n    }\n    \n    return (\n        <div className=\"cast-info\" style={styles.cardContainer}>\n            <img src={MOVIE_IMAGE_URL + url}  alt=\"Not found\" style={styles.cardImage} />\n            <div className=\"cast-name\" style={styles.cardText} >{name}</div>\n        </div>\n    )\n}\n","import React, { useState ,useEffect } from 'react'\nimport { Col, Container, Row } from 'reactstrap'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport CastInfoCard from '../molecules/CastInfoCard'\nimport { BASE_URL, DETAILS_URL, API_KEY, MOVIE_IMAGE_URL, YOUTUBE_VIDEO_URL } from '../../asset/GlobalData'\nimport { TiStar } from 'react-icons/ti'\nimport { BsClock } from 'react-icons/bs'\nimport '../../css/MovieDetails.css'\n\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nexport function MovieDetails(props) {\n    const [movie, setMovie] = useState({})\n    const [genres, setGenres] = useState(\"\")\n    const [movieCredits, setMovieCredits] = useState({})\n    const [castInfoCards, setCastInfoCards] = useState([])\n    const [trailer, setTrailer] = useState({})\n\n    const styles = {\n        pageContainer: {\n            'paddingTop': '8rem',\n            'paddingBottom': '2rem'\n        }\n    }\n\n    const getDirectorName = () => {\n        if (movieCredits.crew) {\n            const director = movieCredits.crew.find(crewMember => crewMember.job === \"Director\")\n            return director.name\n        }\n    }\n\n    const getGenreNames = (genres) => {\n        let genreNames = []\n        if (genres) {\n            for(let movieGenre of genres) {\n                props.genres.map(genre => {\n                    if (movieGenre.id === genre.id) {\n                        genreNames.push(movieGenre.name)\n                    }\n                    return null\n                })\n            }\n            genreNames = genreNames.join(', ')\n        }\n        \n        return genreNames\n    }\n\n    const getMovieDetails = (movieId) => {\n        let url = BASE_URL + DETAILS_URL + movieId + \"?api_key=\" + API_KEY\n        axios.get(url)\n            .then(response => {\n                if (response.status === 200) {\n                    return response.data\n                }\n                if (response.status === 400) {\n                  const error = response.text()\n                  throw new Error(error)\n                }\n                throw new Error(\"Network response was not ok.\")\n            })\n            .then(data => setMovie(data))\n    }\n\n    const getMovieCredits = (movieId) => {\n        let url = BASE_URL + DETAILS_URL + movieId + \"/credits?api_key=\" + API_KEY\n        axios.get(url)\n            .then(response => {\n                if (response.status === 200) {\n                    return response.data\n                }\n                if (response.status === 400) {\n                  const error = response.text()\n                  throw new Error(error)\n                }\n                throw new Error(\"Network response was not ok.\")\n            })\n            .then(data => setMovieCredits(data))\n    }\n\n    const getTrailers = (movieId) => {\n        let url = BASE_URL + DETAILS_URL + movieId + \"/videos?api_key=\" + API_KEY\n        // let url = \"https://api.themoviedb.org/3/movie/337401/videos?api_key=323c169d6502f84d4a8a225e5732db2c\"\n        axios.get(url)\n            .then(response => {\n                if (response.status === 200) {\n                    return response.data\n                }\n                if (response.status === 400) {\n                  const error = response.text()\n                  throw new Error(error)\n                }\n                throw new Error(\"Network response was not ok.\")\n            })\n            .then(data => {\n                const officialTrailer = data.results.find(trailer => trailer.name === \"Official Trailer\")\n                if (officialTrailer) {\n                    setTrailer(officialTrailer)\n                } else {\n                    let availableTrailer = {}\n                    availableTrailer = data.results[0]\n                    setTrailer(availableTrailer)\n                }\n            })\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        const movieId = props.match.params.id\n        getMovieDetails(movieId)\n        getMovieCredits(movieId)\n        getTrailers(movieId)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (movie.genres) {\n            const genreNames = getGenreNames(movie.genres)\n            console.log(genreNames)\n            setGenres(genreNames)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [movie])\n\n    useEffect(() => {\n        if (movieCredits.cast) {\n            const castList = movieCredits.cast.slice(0, 5)\n            const castInfoCards = castList.map(cast => (\n                <CastInfoCard key={cast.credit_id} name={cast.name} url={cast.profile_path} />\n            ))\n            setCastInfoCards(castInfoCards)\n        }\n    }, [movieCredits])\n\n    return (\n        <Container id=\"movie-details\" style={styles.pageContainer}>\n            <Row className=\"movie-details-info\">\n                <Col sm=\"12\" xs=\"5\" md=\"5\" lg=\"4\" className=\"movie-poster\">\n                    <img className=\"movie-detail-img\" src={MOVIE_IMAGE_URL + movie.poster_path} alt={movie.title}/>\n                </Col>\n                <Col sm=\"12\" xs=\"6\" md=\"6\" lg=\"5\" className=\"detail-info-text\">\n                    <Row className=\"movie-detail-title\">\n                        <h2>{movie.title}</h2>\n                    </Row>\n                    <Row className=\"movie-detail-view\">\n                        <TiStar color=\"yellow\" /> \n                        {movie.vote_average}\n                        <div className=\"movie-duration\">\n                             <BsClock color=\"#fff\"/> {movie.runtime} min \n                        </div>\n                        {movie.vote_count} voted\n                    </Row>\n                    <Row className=\"movie-detail-overview\">{movie.overview}</Row>\n                    <Row className=\"movie-detail-release_date\">Release Date: {movie.release_date}</Row>\n                    <Row className=\"movie-detail-genre\">Genre: {genres} </Row>\n                    <Row className=\"movie-detail-director\">Director: {getDirectorName()}</Row>\n                    <Row className=\"cast-text\">Cast: </Row>\n                    <Row className=\"movie-detail-cast\">\n                        {castInfoCards}\n                    </Row>\n                </Col>\n            </Row>\n            <Row className=\"trailer\">\n                <Col sm=\"12\" xs=\"11\" md=\"12\" lg=\"9\" className=\"trailer-container\">\n                    <iframe src={trailer.key ? YOUTUBE_VIDEO_URL + trailer.key : null}  title={movie.title}/>\n                </Col>\n            </Row>\n            <Row className=\"recommendation\">\n                <Col>\n                    <h2>You may also like</h2>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch),\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieDetails)","export const getLanguageCode = (countryName) => {\n    switch (countryName) {\n        case \"United States\":\n        case \"Canada\":\n        case \"United Kingdom\": \n            return \"en\"\n        case \"France\":\n            return \"fr\"\n        case \"Italy\":\n            return \"it\"\n        case \"Russia\":\n            return \"ru\"\n        case \"Korean\":\n            return \"ko\"\n        case \"Japan\":\n            return \"ja\"\n        case \"Hongkong\":\n        case \"China\":\n            return \"zh\"\n        case \"Brazil\":\n            return \"pt\"\n        case \"India\":\n            return \"hi\"\n        default:\n            return \"en\"\n    }\n}\n\nconst getYearStringFromDate = (dateString) => {\n    return dateString.substring(0, 4)\n}\n\nexport const getGenreIdsFromNames = (genreNames, allGenres) => {\n    let genreIds = []\n    if (genreNames.length === 0) return genreIds\n\n    allGenres.map(genre => {\n        for(let genreName of genreNames) {\n            if (genre.name === genreName) {\n                genreIds.push(genre.id)\n            }\n        }\n        return null\n    })\n    \n    return genreIds\n}\n\nexport const getLanguageCodesFromCountryNames = (countries) => {\n    const languageCodes = []\n    countries.map(country => {  \n        languageCodes.push(getLanguageCode(country))\n        return null\n    })\n    return languageCodes\n}\n\nexport const compareByDate = (a, b) => {\n    return new Date(a.release_date) > new Date(b.release_date)\n}\n\nexport const compareByName = (a, b) => {\n    return a.title.localeCompare(b.title)\n}\n\nexport const compareByRate = (a, b) => {\n    return a.vote_average === b.vote_average ? 0 : (a.vote_average > b.vote_average ? -1 : 1)\n}\n\nexport const compareByView = (a, b) => {\n    return a.popularity === b.popularity ? 0 : (a.popularity > b.popularity ? 1 : -1)\n}\n\nexport const filterGenre = (genreConditions, movie) => {\n    if (genreConditions.length === 0) return true   // no genre condition, return all movie \n    return genreConditions.every(condition => {    // movie must contains all the genres in the filter list\n        return movie.genre_ids.includes(condition)\n    })\n}\n\nexport const filterYear = (yearConditions, movie) => {\n    if (yearConditions.length === 0) return true    // no year condition, return all movie\n    if (!movie.release_date) return false   // some movies does not have release_date\n\n    return yearConditions.includes(getYearStringFromDate(movie.release_date))\n}\n\nexport const filterCountry = (countryConditions, movie) => {\n    if (countryConditions.length === 0) return true     // no country condition, return all movie\n    if (!movie.original_language)  return false // incase movie does not have original language\n    const languageCodes = getLanguageCodesFromCountryNames(countryConditions)\n    return languageCodes.includes(movie.original_language)\n}\n\nexport const sortMovies = (movies, sortType) => {\n    switch (sortType) {\n        case \"Default\":\n            return movies\n        case \"Release Date\":\n            return movies.sort(compareByDate)\n        case \"Name\":\n            return movies.sort(compareByName)\n        case \"Rate\": \n            return movies.sort(compareByRate)\n        case \"Most Watched\":\n            return movies.sort(compareByView)\n        default:\n            return movies\n    }\n}\n","import * as actionTypes from './actionTypes'\n\nexport function setFilterOptions(options) {\n    return { type: actionTypes.SET_FILTER_OPTION, options }\n}","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as filterbarActions from '../../redux/actions/filterbarActions'\nimport { COUNTRIES, YEARS, SORT_OPTIONS } from '../../asset/GlobalData'\nimport { UncontrolledDropdown, DropdownToggle, Nav, DropdownMenu, NavItem, Button } from 'reactstrap'\nimport \"../../css/FilterBar.css\"\nimport { TiArrowUnsorted } from \"react-icons/ti\"\nimport { RiFilterOffFill } from \"react-icons/ri\"\nimport { AiOutlineGlobal, AiTwotoneCalendar, AiTwotoneFolderOpen } from \"react-icons/ai\"\n\nexport function FilterBar(props) {\n    const countries = COUNTRIES\n    const years = YEARS\n    const sorts = SORT_OPTIONS\n    const [countryDropdownItems, setCountryDropdownItems] = useState([])\n    const [yearDropdownItems, setYearDropdownItems] = useState([])\n    const [sortDropdownItems, setSortDropdownItems] = useState([])\n    const [genreDropdownItems, setGenreDropdownItems] = useState([])\n    const [genreCheckBoxsState, setGenreCheckBoxsState] = useState([])\n    const [yearCheckBoxsState, setYearCheckBoxsState] = useState([])\n    const [countryCheckBoxsState, setCountryCheckBoxsState] = useState([])\n    const [sortCheckBoxsState, setSortCheckBoxsState] = useState({sortType: 'Default'})\n\n    const [genreValueText, setGenreValueText] = useState('All')\n    const [yearValueText, setYearValueText] = useState('All')\n    const [countryValueText, setCountryValueText] = useState('All')\n    const [sortValueText, setSortValueText] = useState('Default')\n    \n    const hanldeGenreCheckBoxsChange = (event) => {\n        const { name, checked } = event.target\n        setGenreCheckBoxsState(prevState => ({ ...prevState, [name]: checked }))\n    }\n\n    const hanldeYearCheckBoxsChange = (event) => {\n        const { name, checked } = event.target\n        setYearCheckBoxsState(prevState => ({ ...prevState, [name]: checked }))\n    }\n\n    const hanldeCountryCheckBoxsChange = (event) => {\n        const { name, checked } = event.target\n        setCountryCheckBoxsState(prevState => ({ ...prevState, [name]: checked }))\n    }\n\n    const hanldeSortCheckBoxsChange = (event) => {\n        const { value } = event.target\n        setSortCheckBoxsState(prevState => ({ ...prevState, \"sortType\": value }))\n        setSortValueText(value)\n    }\n\n    const getObjLength = (obj) => {\n        return Object.keys(obj).length\n    }\n\n    const getChecked = (obj) => {\n        const length = getObjLength(obj)\n        if (length === 0) return 0\n        return Object.values(obj).reduce((count, item) => count + (item === true ? 1 : 0), 0)\n    }\n\n    const getCheckedValue = (obj) => {\n        return Object.keys(obj).find(key => obj[key] === true)\n    }\n\n    const getCheckedArray = (obj) => {\n        let checkedArray = []\n        for (const [key, value] of Object.entries(obj)) {\n            if (value === true) checkedArray.push(key)\n        }\n        return checkedArray\n    }\n\n    // const unCheck = (obj) => {\n    //     let newObj = {}\n    //     Object.keys(obj).map(key => {\n    //         newObj = { ...newObj, [key]: false}\n    //     })\n\n    //     return newObj\n    // }\n\n    // const clearFilter = () => {\n    //     setGenreValueText('All')\n    //     setYearValueText('All')\n    //     setCountryValueText('All')\n    //     setSortValueText('Default')\n    //     // setGenreCheckBoxsState([])\n    //     // setYearCheckBoxsState([])\n    //     // setCountryCheckBoxsState([])\n    //     setSortCheckBoxsState({sortType: 'Default'})\n    //     if (getObjLength(genreCheckBoxsState) > 0) {\n    //         let newGenreState = unCheck(genreCheckBoxsState)\n    //         console.log(newGenreState)\n    //         setGenreCheckBoxsState(newGenreState)\n    //     }\n    //     if (getObjLength(yearCheckBoxsState) > 0) {\n    //         let newYearState = unCheck(yearCheckBoxsState)\n    //         console.log(newYearState)\n    //         setYearCheckBoxsState(newYearState)\n    //     }\n    //     if (getObjLength(countryCheckBoxsState) > 0) {\n    //         let newCountryState = unCheck(countryCheckBoxsState)\n    //         console.log(countryCheckBoxsState)\n    //         setCountryCheckBoxsState(newCountryState)\n    //     }\n\n    //     console.log(\"clear filter trigger\")\n    //     // props.actions.setFilterOptions({ \n    //     //     ...props.filterOptions,\n    //     //     genres: [],\n    //     //     years: [],\n    //     //     countries: [],\n    //     //     // sort: 'Default' \n    //     // })\n    // }\n\n    useEffect(() => {\n        let countryItems = []\n        let yearItems = []\n        let sortItems = []\n\n        countries.map((country, index) => {\n            countryItems.push(\n                <div key={index} className=\"dropdown-item country-filter-item\">\n                    <input type=\"checkbox\" name={country} \n                        checked={countryCheckBoxsState[country]} \n                        onChange={hanldeCountryCheckBoxsChange} \n                    />\n                    {country}\n                </div>\n            )\n            return null\n        })\n\n        years.map((year, index) => {\n            yearItems.push(\n                <div key={index} className=\"dropdown-item year-filter-item\">\n                    <input type=\"checkbox\" name={year} \n                        checked={yearCheckBoxsState[year]} \n                        onChange={hanldeYearCheckBoxsChange} \n                    />\n                    {year}\n                </div>\n            )\n            return null\n        })\n\n        sorts.map((sort, index) => {\n            sortItems.push(\n                <div key={index} className=\"dropdown-item sort-filter-item\">\n                    <input type=\"radio\" name=\"sort\"\n                        key={index}\n                        value={sort} \n                        onChange={hanldeSortCheckBoxsChange} \n                    />\n                    {sort}\n                </div>\n            )\n            return null\n        })\n\n        setCountryDropdownItems(countryItems)\n        setYearDropdownItems(yearItems)\n        setSortDropdownItems(sortItems)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        let yearItems = []\n        years.map((year, index) => {\n            yearItems.push(\n                <div key={index} className=\"dropdown-item year-filter-item\">\n                    <input type=\"checkbox\" name={year} \n                        checked={yearCheckBoxsState[year]} \n                        onChange={hanldeYearCheckBoxsChange} \n                    />\n                    {year}\n                </div>\n            )\n            setYearDropdownItems(yearItems)\n            return null\n        })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [yearCheckBoxsState])\n\n    useEffect(() => {\n        let countryItems = []\n        countries.map((country, index) => {\n            countryItems.push(\n                <div key={index} className=\"dropdown-item country-filter-item\">\n                    <input type=\"checkbox\" name={country} \n                        checked={countryCheckBoxsState[country]} \n                        onChange={hanldeCountryCheckBoxsChange} \n                    />\n                    {country}\n                </div>\n            )\n            setCountryDropdownItems(countryItems)\n            return null\n        })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [countryCheckBoxsState])\n\n    useEffect(() => {\n        let sortItems = []\n        sorts.map((sort, index) => {\n            sortItems.push(\n                <div key={index} className=\"dropdown-item sort-filter-item\">\n                    <input type=\"radio\" name=\"sort\"\n                        key={index}\n                        checked={sortCheckBoxsState.sortType === sort}\n                        value={sort} \n                        onChange={hanldeSortCheckBoxsChange} \n                    />\n                    {sort}\n                </div>\n            )\n            setSortDropdownItems(sortItems)\n            return null\n        })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sortCheckBoxsState])\n\n    useEffect(() => {\n        if (props.genres.length > 0) {\n            let items = []\n            props.genres.map((genre, index) => {\n                items.push(\n                    <div key={index} className=\"dropdown-item genre-filter-item\">\n                        <input type=\"checkbox\" name={genre.name} \n                            checked={genreCheckBoxsState[genre.name]} \n                            onChange={hanldeGenreCheckBoxsChange} \n                        />\n                        {genre.name}\n                    </div>\n                )\n                return null\n            })\n            setGenreDropdownItems(items)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.genres, genreCheckBoxsState])\n\n    useEffect(() => {\n        const genresChecked = getChecked(genreCheckBoxsState)    \n        if (genresChecked === 0) {\n            setGenreValueText('All')\n        } else {\n            if (genresChecked === 1) {\n                let genre = getCheckedValue(genreCheckBoxsState)\n                setGenreValueText(genre)\n            } else {\n                setGenreValueText(`${genresChecked} selected`)\n            }\n        }\n\n        const checkedGenres = getCheckedArray(genreCheckBoxsState)\n        props.actions.setFilterOptions({ ...props.filterOptions, genres: checkedGenres })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [genreCheckBoxsState])\n\n    useEffect(() => {\n        const yearsChecked = getChecked(yearCheckBoxsState)    \n        if (yearsChecked === 0) {\n            setYearValueText('All')\n        } else {\n            if (yearsChecked === 1) {\n                let year = getCheckedValue(yearCheckBoxsState)\n                setYearValueText(year)\n            } else {\n                setYearValueText(`${yearsChecked} selected`)\n            }\n        }\n\n        const checkedYears = getCheckedArray(yearCheckBoxsState)\n        props.actions.setFilterOptions({ ...props.filterOptions, years: checkedYears })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [yearCheckBoxsState])\n\n    useEffect(() => {\n        const countryChecked = getChecked(countryCheckBoxsState)    \n        if (countryChecked === 0) {\n            setCountryValueText('All')\n        } else {\n            if (countryChecked === 1) {\n                let year = getCheckedValue(countryCheckBoxsState)\n                setCountryValueText(year)\n            } else {\n                setCountryValueText(`${countryChecked} selected`)\n            }\n        }\n\n        const checkedCountries = getCheckedArray(countryCheckBoxsState)\n        props.actions.setFilterOptions({ ...props.filterOptions, countries: checkedCountries })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [countryCheckBoxsState])\n\n    useEffect(() => {\n        const sortValue = sortCheckBoxsState.sortType\n        props.actions.setFilterOptions({ ...props.filterOptions, sort: sortValue })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sortCheckBoxsState])\n\n    return (\n        <div className=\"filter-bar-wrapper\">\n            <Nav>\n                <UncontrolledDropdown nav inNavbar>\n                    <DropdownToggle nav caret>\n                        <AiTwotoneFolderOpen /> \n                        Genre \n                        <div className=\"genre-value\">{genreValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                        { genreDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar className=\"year-filter\">\n                    <DropdownToggle nav caret>\n                        <AiTwotoneCalendar /> Year\n                        <div className=\"year-value\">{yearValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                        { yearDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar>\n                    <DropdownToggle nav caret>\n                        <AiOutlineGlobal /> Country\n                        <div className=\"country-value\">{countryValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                       { countryDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar className=\"sort-filter\">\n                    <DropdownToggle nav caret>\n                        <TiArrowUnsorted /> Sort\n                        <div className=\"sort-value\">{sortValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                       { sortDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <NavItem>\n                    <Button color=\"info\" className=\"clear-filter-button\"><RiFilterOffFill />Clear Filter</Button>\n                </NavItem>\n            </Nav>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres.length === 0 ? [] : state.genres,\n        filterOptions: state.filterbar\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            setFilterOptions: bindActionCreators(filterbarActions.setFilterOptions, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterBar)\n","import React, { useState, useEffect } from \"react\"\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\"\nimport '../../css/PaginationBar.css'\n\nexport default function PaginationBar({ moviesPerPage, totalMovies, currentPage, paginate, link }) {\n    const [pageNumbers, setPageNumbers] = useState(0)\n    const [paginationItems, setPaginationItems] = useState([])\n    const [activePage, setActivePage] = useState(currentPage)\n\n    const firstPageClick = () => {\n        paginate(1)\n        setActivePage(1)\n    }\n\n    const prePageClick = () => {\n        if (currentPage > 1) {\n            paginate(currentPage - 1)\n            setActivePage(currentPage - 1)\n        }\n    }\n\n    const nextPageClick = () => {\n        if (currentPage < pageNumbers.length) {\n            paginate(currentPage + 1)\n            setActivePage(currentPage + 1)\n        }\n    }\n\n    const lastPageClick = () => {\n        const lastIndex = pageNumbers.length\n        paginate(lastIndex)\n        setActivePage(lastIndex)\n    }\n\n    const pageClick = (number) => {\n        paginate(number)\n        setActivePage(number)\n    }\n\n    useEffect(() => {\n        setActivePage(currentPage)\n    }, [currentPage])\n\n    useEffect(() => {\n        let pageNum = []\n        for (let i = 1; i <= Math.ceil(totalMovies / moviesPerPage); i++) {\n            pageNum.push(i)\n        }\n        setPageNumbers(pageNum)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [totalMovies])\n\n    useEffect(() => {\n        if (pageNumbers.length > 0) {\n            const items = pageNumbers.map(number => (\n                <PaginationItem key={number} className={activePage === number ? 'active-page' : ''}>\n                    <PaginationLink href={link} onClick={()=> pageClick(number)}>{number}</PaginationLink>\n                </PaginationItem>\n            ))\n            setPaginationItems(items)\n        } else {\n            setPaginationItems([])\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [pageNumbers, activePage])\n\n    return (\n        <Pagination aria-label=\"Page navigation example\">\n            <PaginationItem>\n                <PaginationLink first href={link} onClick={firstPageClick} />\n            </PaginationItem>\n            <PaginationItem>\n                <PaginationLink previous href={link} onClick={prePageClick} />\n            </PaginationItem>\n                {paginationItems}\n            <PaginationItem>\n                <PaginationLink next href={link} onClick={nextPageClick} />\n            </PaginationItem>\n            <PaginationItem>\n                <PaginationLink last href={link} onClick={lastPageClick} />\n            </PaginationItem>\n        </Pagination>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Container, Row } from 'reactstrap'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport * as filterFunctions from '../../asset/FilterFunctions'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\n\nexport function TopRatedMovies(props) {\n    const [movies, setMovies] = useState([])\n    const [filteredMovies, setFilteredMovies] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const moviesPerPage = 40\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = filteredMovies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        pageContainer: {\n            'padding-top': '8rem'\n        },\n        topRatedMovieContainer: {\n            'margin': '0 1rem',\n            'width': '100%'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        if (movies.length === 0) {\n            props.actions.loadTopRatedMovies()\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    useEffect(() => {\n        setMovies(props.topRatedMovies)\n        setFilteredMovies(props.topRatedMovies)\n    }, [props.topRatedMovies])\n\n    useEffect(() => {\n        if (movies.length > 0) {\n            let sortType = \"Default\"\n            if (props.filterOptions.sort) {\n                sortType = props.filterOptions.sort\n            }\n\n            const genreIds = filterFunctions.getGenreIdsFromNames(props.filterOptions.genres, props.genres)\n            let filteredMovieList = \n                movies\n                    .filter(filterFunctions.filterGenre.bind(this, genreIds))\n                    .filter(filterFunctions.filterYear.bind(this, props.filterOptions.years))\n                    .filter(filterFunctions.filterCountry.bind(this, props.filterOptions.countries))\n\n            filteredMovieList = filterFunctions.sortMovies(filteredMovieList, sortType)\n            setFilteredMovies(filteredMovieList)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.filterOptions])\n\n    return (\n        <Container id=\"top-rated-movies\" style={styles.pageContainer}>\n            <Row className=\"filter-bar\">\n                <FilterBar />\n            </Row>\n            <Row className=\"top-rated-movies\">\n                <div className=\"top-rated-movie-list\" style={styles.topRatedMovieContainer}>\n                    <MovieList movieList={currentMovies} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                <PaginationBar moviesPerPage={moviesPerPage} totalMovies={filteredMovies.length} \n                    currentPage={currentPage} paginate={paginate} link=\"#top-rated-movies\" />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        topRatedMovies: state.movies.topRatedMovies.length === 0 \n            ? [] \n            : state.movies.topRatedMovies,\n        filterOptions: state.filterbar,\n        genres: state.genres\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadTopRatedMovies: bindActionCreators(movieActions.loadTopRatedMovies, dispatch),\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopRatedMovies)","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport * as filterFunctions from '../../asset/FilterFunctions'\nimport { Container, Row } from 'reactstrap'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\n\nexport function PopularMovies(props) {\n    const [movies, setMovies] = useState([])\n    const [filteredMovies, setFilteredMovies] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const moviesPerPage = 40\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = filteredMovies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        pageContainer: {\n            'padding-top': '8rem'\n        },\n        popularMovieContainer: {\n            'margin': '0 1rem',\n            'width': '100%'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        if (movies.length === 0) {\n            props.actions.loadPopularMovies()\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    useEffect(() => {\n        setMovies(props.popularMovies)\n        setFilteredMovies(props.popularMovies)\n    }, [props.popularMovies])\n\n    useEffect(() => {\n        if (movies.length > 0) {\n            let sortType = \"Default\"\n            if (props.filterOptions.sort) {\n                sortType = props.filterOptions.sort\n            }\n\n            const genreIds = filterFunctions.getGenreIdsFromNames(props.filterOptions.genres, props.genres)\n            let filteredMovieList = \n                movies\n                    .filter(filterFunctions.filterGenre.bind(this, genreIds))\n                    .filter(filterFunctions.filterYear.bind(this, props.filterOptions.years))\n                    .filter(filterFunctions.filterCountry.bind(this, props.filterOptions.countries))\n\n            filteredMovieList = filterFunctions.sortMovies(filteredMovieList, sortType)\n            setFilteredMovies(filteredMovieList)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.filterOptions])\n\n    return (\n        <Container id=\"popular-movies\" style={styles.pageContainer}>\n            <Row className=\"filter-bar\">\n                <FilterBar />\n            </Row>\n            <Row className=\"popular-movies\">\n                <div className=\"popular-movie-list\" style={styles.popularMovieContainer}>\n                    <MovieList movieList={currentMovies} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                <PaginationBar moviesPerPage={moviesPerPage} totalMovies={filteredMovies.length} \n                    currentPage={currentPage} paginate={paginate} link=\"#popular-movies\" />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        popularMovies: state.movies.popularMovies.length === 0 \n            ? [] \n            : state.movies.popularMovies,\n        filterOptions: state.filterbar,\n        genres: state.genres\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadPopularMovies: bindActionCreators(movieActions.loadPopularMovies, dispatch),\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PopularMovies)","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Container, Row } from 'reactstrap'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport * as filterFunctions from '../../asset/FilterFunctions'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\nimport axios from 'axios'\nimport { BASE_URL, SEARCH_URL, API_KEY } from '../../asset/GlobalData'\n\nexport function SearchPage(props) {\n    const [movies, setMovies] = useState([])\n    const [filteredMovies, setFilteredMovies] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const [searchString, setSearchString] = useState(\"\")\n    const moviesPerPage = 40\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = filteredMovies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        pageContainer: {\n            'padding-top': '8rem'\n        },\n        searchMovieContainer: {\n            'margin': '0 1rem',\n            'width': '100%'\n        },\n        searchTitle: {\n            'margin': '0rem 1rem 2rem 1rem'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    const getSearchMovies = (searchString) => {\n        const getSearchMoviesFuncs = []\n        for (let i = 1; i <= 20; i++) {\n            getSearchMoviesFuncs.push(getSearchMoviesFromOnePage(i, searchString))\n        }\n\n        Promise.all(getSearchMoviesFuncs)\n            .then(function (responses) {\n                const combinedData = []\n                responses.map(res => {\n                    if (res.data.results) {\n                        combinedData.push(...res.data.results)\n                    }\n                    return null\n                })\n                setMovies(combinedData)\n                setFilteredMovies(combinedData)\n            })\n            .catch(error => {\n                console.error(\"API call failed. \" + error)\n                throw error\n            }) \n    }\n\n    const getSearchMoviesFromOnePage = (pageNumber, searchString) => {\n        let url = BASE_URL + SEARCH_URL + API_KEY + `&query=${searchString}&page=${pageNumber}`\n        return axios.get(url)\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        if (props.location.state) {\n            let searchQuery = props.location.state.searchString\n            setSearchString(searchQuery)\n            getSearchMovies(searchQuery)\n            if (movies.length === 0) {\n                getSearchMovies(searchQuery)\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (props.location.state) {\n            let searchQuery = props.location.state.searchString\n            if (searchQuery !== searchString) {\n                setSearchString(searchQuery)\n                getSearchMovies(searchQuery)\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.location.state])\n\n    useEffect(() => {\n        if (movies.length > 0) {\n            let sortType = \"Default\"\n            if (props.filterOptions.sort) {\n                sortType = props.filterOptions.sort\n            }\n\n            const genreIds = filterFunctions.getGenreIdsFromNames(props.filterOptions.genres, props.genres)\n            let filteredMovieList = \n                movies\n                    .filter(filterFunctions.filterGenre.bind(this, genreIds))\n                    .filter(filterFunctions.filterYear.bind(this, props.filterOptions.years))\n                    .filter(filterFunctions.filterCountry.bind(this, props.filterOptions.countries))\n\n            filteredMovieList = filterFunctions.sortMovies(filteredMovieList, sortType)\n            setFilteredMovies(filteredMovieList)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.filterOptions])\n\n    return (\n        <Container id=\"search-movies\" style={styles.pageContainer}>\n            <Row className=\"search-title\">\n                <h2 style={styles.searchTitle}>\n                    {`Results for: ${searchString}`}\n                </h2>\n            </Row>\n            <Row className=\"filter-bar\">\n                <FilterBar/>\n            </Row>\n            <Row className=\"search-movies\">\n                <div className=\"search-movie-list\" style={styles.searchMovieContainer}>\n                    <MovieList movieList={currentMovies} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                {movies.length > 0 && \n                    (\n                        <PaginationBar moviesPerPage={moviesPerPage} totalMovies={filteredMovies.length} \n                            currentPage={currentPage} paginate={paginate} link=\"#search-movies\" />\n                    )\n                }\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        filterOptions: state.filterbar,\n        genres: state.genres\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage)\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport './css/App.css'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Navbar from './components/commons/NavBar'\nimport Home from './components/pages/Home'\nimport MovieDetails from './components/pages/MovieDetails'\nimport TopRatedMovies from './components/pages/TopRatedMovies'\nimport PopularMovies from './components/pages/PopularMovies'\nimport SearchPage from './components/pages/SearchPage'\n\n// axios.defaults.baseURL = 'https://...'\nfunction App(props) {\n  const [showNav, setShowNav] = useState(true)\n  const [transparentNav, setTransparentNav] = useState(true)\n  const [scrolledPosition, setSrolledPosition] = useState(0)\n  const [carouselHeight, setCarouselHeight] = useState(0)\n\n  const handleScroll = () => {\n    if (!props.homepage) {\n      setTransparentNav(false)\n      setShowNav(true)\n      return\n    }\n\n    const currentPosition = window.pageYOffset\n\n    if (carouselHeight <= 0 ) {\n      if (document.querySelector('.carousel')) {\n        const height = document.querySelector('.carousel').clientHeight\n        setCarouselHeight(height)\n      }\n    }\n\n    // show/hide navbar when scroll\n    if (scrolledPosition > currentPosition) {\n      setShowNav(true)\n    } else {\n      setShowNav(false)\n    }\n\n    // make change navbar background when carousel is not in view port\n    if (currentPosition > carouselHeight) {\n      setTransparentNav(false)\n    } else {\n      setTransparentNav(true)\n    }\n\n    setSrolledPosition(currentPosition)\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll)\n    }\n  })\n\n  useEffect(() => {\n    if (props.homepage) {\n      const currentPosition = window.pageYOffset\n      if(currentPosition === 0) {\n        setTransparentNav(true)\n      } else {\n        setTransparentNav(false)\n      }\n    } else {\n      setTransparentNav(false)\n    }\n  }, [props.homepage])\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar showNav={showNav} isTransparent={transparentNav} />\n        <Switch>\n          <Route path=\"/popular\" component={PopularMovies} />\n          <Route path=\"/toprated\" component={TopRatedMovies} />\n          <Route path=\"/details/:id\" component={MovieDetails} />\n          <Route path='/search' component={SearchPage} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n      homepage: state.navbar.homepage\n  }\n}\n\nexport default connect(mapStateToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    nowPlaying: [],\n    searchMovies: [],\n    recommendedMovies: [],\n    upcomingMovies: [],\n    topRatedMovies: [],\n    popularMovies: [],\n}\n\nexport default function movieReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.LOAD_NOW_PLAYING_MOVIE_SUCCESS: \n            return { ...state, nowPlaying: action.movies }\n        case actionTypes.LOAD_RECOMMENDED_MOVIE_SUCCESS:\n            return { ...state, recommendedMovies: action.movies }\n        case actionTypes.LOAD_UPCOMING_MOVIE_SUCCESS:\n            return { ...state, upcomingMovies: action.movies }\n        case actionTypes.LOAD_POPULAR_MOVIE_SUCCESS:\n            return { ...state, popularMovies: action.movies }\n        case actionTypes.LOAD_TOP_RATED_MOVIE_SUCCESS:\n            return { ...state, topRatedMovies: action.movies }\n        case actionTypes.LOAD_LATEST_MOVIES:\n            return { ...state, latestMovies: action.latestMovies }\n        case actionTypes.LOAD_TRENDING_MOVIES:\n            return { ...state, trendingMovies: action.trendingMovies }\n        default:\n            return state\n    }\n}","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    homepage: true\n}\n\nexport default function navbarReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.SET_HOME_PAGE:\n            return { ...state, homepage: action.value }\n        default:\n            return state\n    }\n}","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    genres: [],\n    years: [],\n    countries: [],\n    sort: 'Default'\n}\n\nexport default function filterbarReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.SET_FILTER_OPTION:\n            return action.options\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport genres from './genreReducer'\nimport movies from './movieReducer'\nimport navbar from './navbarReducer'\nimport filterbar from './filterbarReducer'\n\nconst rootReducer = combineReducers({\n    genres,\n    movies,\n    navbar,\n    filterbar\n})\n\nexport default rootReducer","import * as actionTypes from '../actions/actionTypes'\n\nexport default function genreReducer(state = [], action) {\n    switch(action.type) {\n        case actionTypes.LOAD_GENRES_SUCCESS: \n            return action.genres\n        default:\n            return state\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './redux/configureStore'\nimport { Provider as ReduxProvider } from 'react-redux'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ReduxProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, compose } from 'redux'\nimport rootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport { applyMiddleware } from 'redux'\n\nexport default function configureStore(initialState) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n    return createStore(\n        rootReducer,\n        initialState,\n        composeEnhancers(applyMiddleware(thunk))\n    )\n} "],"sourceRoot":""}
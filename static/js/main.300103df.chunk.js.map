{"version":3,"sources":["components/atoms/InputSearch.js","api/apiUtils.js","asset/GlobalData.js","redux/actions/genreActions.js","api/genreApi.js","redux/actions/actionTypes.js","components/commons/NavBar.js","api/movieApi.js","redux/actions/movieActions.js","redux/actions/navbarActions.js","components/atoms/MovieCarousel.js","components/atoms/SectionHeading.js","components/atoms/MovieCard.js","components/molecules/MovieList.js","components/organisms/MovieSection.js","components/pages/Home.js","components/pages/MovieDetails.js","components/molecules/FilterBar.js","components/molecules/PaginationBar.js","components/pages/TopRatedMovies.js","components/pages/PopularMovies.js","components/pages/SearchPage.js","App.js","serviceWorker.js","redux/reducers/movieReducer.js","redux/reducers/navbarReducer.js","redux/reducers/filterbarReducer.js","redux/reducers/index.js","redux/reducers/genreReducer.js","index.js","redux/configureStore.js"],"names":["InputSearch","history","useHistory","useState","searchString","setSearchString","className","onSubmit","e","preventDefault","length","push","alert","type","placeholder","value","onChange","event","target","handleResponse","response","a","status","data","text","error","Error","handleError","console","API_KEY","BASE_URL","sectionNames","COUNTRIES","YEARS","SORT_OPTIONS","loadGenres","dispatch","axios","get","then","catch","res","genres","connect","state","textColor","navbar","actions","bindActionCreators","genreActions","props","genreDropdownItems","setGenreDropdownItems","countryDropdownItems","setCountryDropdownItems","countries","showNav","show","setShow","isTransparent","setIsTransparent","isOpen","setIsOpen","useEffect","items","map","country","index","DropdownItem","key","genre","name","Navbar","fixed","dark","expand","to","NavbarToggler","onClick","Collapse","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","NavItem","getPopularMoviesFromOnePage","pageNumber","url","getTopRatedMoviesFromOnePage","loadNowPlayingMovies","nowPlayingList","recommendedList","results","i","movie","movies","loadRecommendedMoviesSuccess","loadPopularMovies","getPopularMoviesFuncs","Promise","all","responses","combinedData","movieApi","loadTopRatedMovies","getTopRatedMoviesFuncs","setHomepage","nowPlaying","activeIndex","setActiveIndex","animating","setAnimating","setItems","newItems","src","backdrop_path","altText","original_title","caption","overview","next","nextIndex","previous","slides","item","CarouselItem","onExiting","onExited","alt","CarouselCaption","captionText","captionHeader","Carousel","CarouselIndicators","onClickHandler","newIndex","CarouselControl","direction","directionText","SectionHeading","style","sectionTitle","poster_path","title","color","genreIds","genreNames","genreId","id","join","getGenreNamesFromIds","genre_ids","release_date","size","vote_average","MovieList","movieCards","movieList","recommended","recommendedMovies","setTitle","setMovies","sectionName","Container","movieActions","setHomePage","navbarActions","Row","MovieDetails","years","sorts","yearDropdownItems","setYearDropdownItems","sortDropdownItems","setSortDropdownItems","genreCheckBoxsState","setGenreCheckBoxsState","yearCheckBoxsState","setYearCheckBoxsState","countryCheckBoxsState","setCountryCheckBoxsState","setSortCheckBoxsState","genreValueText","setGenreValueText","yearValueText","setYearValueText","countryValueText","setCountryValueText","sortValueText","setSortValueText","hanldeGenreCheckBoxsChange","checked","prevState","hanldeYearCheckBoxsChange","hanldeCountryCheckBoxsChange","hanldeSortCheckBoxsChange","getChecked","obj","Object","keys","getObjLength","values","reduce","count","getCheckedValue","find","countryItems","yearItems","sortItems","year","sort","genresChecked","yearsChecked","log","countryChecked","Button","PaginationBar","moviesPerPage","totalMovies","currentPage","paginate","link","pageNumbers","setPageNumbers","paginationItems","setPaginationItems","activePage","setActivePage","pageNum","Math","ceil","number","PaginationItem","PaginationLink","href","pageClick","Pagination","aria-label","first","last","lastIndex","topRatedMovies","setCurrentPage","indexOfLastMovie","indexOfFirstMovie","currentMovies","slice","styles","topRatedMovieContainer","filterBar","paginationBar","popularMovies","popularMovieContainer","searchTitle","searchMovieContainer","getSearchMovies","getSearchMoviesFuncs","getSearchMoviesFromOnePage","location","searchQuery","homepage","setShowNav","transparentNav","setTransparentNav","scrolledPosition","setSrolledPosition","carouselHeight","setCarouselHeight","handleScroll","currentPosition","window","pageYOffset","document","querySelector","height","clientHeight","addEventListener","removeEventListener","path","component","PopularMovies","TopRatedMovies","SearchPage","Home","Boolean","hostname","match","initialState","searchMovies","rootReducer","combineReducers","action","latestMovies","trendingMovies","filterbar","options","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","configureStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.300103df.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { MdSearch } from \"react-icons/md\"\nimport '../../css/InputSearch.css'\nimport { useHistory } from 'react-router-dom'\n\nexport default function InputSearch() {\n    const history = useHistory()\n    const [searchString, setSearchString] = useState('')\n    const search = (e) => {\n        e.preventDefault()\n        if (searchString.length > 0) {\n            history.push('/search', {searchString: searchString})\n        } else {\n            alert('Please input search key words')\n        }\n    }\n\n    const handleChange = (event) => setSearchString(event.target.value)\n\n    return (\n        <form className=\"search-box\" onSubmit={search}>\n            <input type=\"text\" className=\"input\" placeholder=\"Movie name...\" value={searchString} onChange={handleChange} />\n            <button type=\"submit\" className=\"search-button\">\n                <MdSearch />\n            </button>\n        </form>\n    )\n}\n","export async function handleResponse(response) {\n    if (response.status === 200) {\n        return response.data\n    }\n    if (response.status === 400) {\n      const error = await response.text()\n      throw new Error(error)\n    }\n    throw new Error(\"Network response was not ok.\")\n  }\n  \n  export function handleError(error) {\n    console.error(\"API call failed. \" + error)\n    throw error\n  }\n  ","export const API_KEY = \"323c169d6502f84d4a8a225e5732db2c\"\nexport const BASE_URL = \"https://api.themoviedb.org/3/\"\nexport const GENRE_URL = 'genre/movie/list?api_key='\nexport const NOW_PLAYING_URL = 'movie/now_playing?api_key='\nexport const POPULAR_URL = 'movie/popular?api_key='\nexport const TOP_RATED_URL = 'movie/top_rated?api_key='\nexport const SEARCH_URL = 'search/movie?api_key='\nexport const POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w1280'\nexport const MOVIE_IMAGE_URL = 'https://image.tmdb.org/t/p/w500'\n\nexport const sectionNames = {\n    RECOMMENDED_MOVIES: \"Recommend Movies\",\n    LATEST_MOVIES: \"Lastest Movies\",\n    TRENDING_MOVIES: \"Trending Movies\"\n}\n\nexport const COUNTRIES = [\n    \"United States\", \"France\", \"Canada\", \"Italy\", \"United Kingdom\", \"Russia\", \n    \"Korean\", \"Japan\", \"Hongkong\", \"China\", \"South Africa\", \"Brazil\"\n]\n\nexport const YEARS = [\n    2020, 2019, 2018, 2016, 2015, 2014, 2013, 2012, 2010\n]\n\nexport const SORT_OPTIONS = [\n    \"Default\", \"Release Date\", \"Name\", \"Rate\", \"Most Watched\"\n]","import * as genreApi from '../../api/genreApi'\nimport * as actionTypes from './actionTypes'\n\nexport function loadGenresSuccess(genres) {\n    return { type: actionTypes.LOAD_GENRES_SUCCESS, genres }\n}\n\nexport function loadGenres() {\n    return function(dispatch) {\n        return genreApi\n            .getGenres()\n            .then(res => {\n                dispatch(loadGenresSuccess(res.genres))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}","import { handleResponse, handleError } from \"./apiUtils\"\nimport { BASE_URL, GENRE_URL, API_KEY } from '../asset/GlobalData'\nimport axios from 'axios'\n\nexport function getGenres() {\n    let url = BASE_URL + GENRE_URL + API_KEY\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}","export const LOAD_GENRES_SUCCESS = \"LOAD_GENRES_SUCCESS\"\n\nexport const SET_HOME_PAGE = \"SET_HOME_PAGE\"\n\nexport const SET_FILTER_OPTION = \"SET_FILTER_OPTION\"\n\n// #region movie actions\n\nexport const LOAD_NOW_PLAYING_MOVIE_SUCCESS = \"LOAD_NOW_PLAYING_MOVIE_SUCCESS\"\nexport const LOAD_RECOMMENDED_MOVIE_SUCCESS = \"LOAD_RECOMMENDED_MOVIE_SUCCESS\"\nexport const LOAD_POPULAR_MOVIE_SUCCESS = \"LOAD_POPULAR_MOVIE_SUCCESS\"\nexport const LOAD_TOP_RATED_MOVIE_SUCCESS = \"LOAD_TOP_RATED_MOVIE_SUCCESS\"\n\nexport const LOAD_NOW_PLAYING = \"LOAD_NOW_PLAYING\"\nexport const LOAD_LATEST_MOVIES = \"LOAD_LATEST_MOVIES\"\nexport const LOAD_TRENDING_MOVIES = \"LOAD_TRENDING_MOVIES\"\n\n//#endregion","import React, { useState, useEffect } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Navbar, NavbarToggler, Collapse, Nav, NavItem, NavbarBrand,\n    UncontrolledDropdown, DropdownToggle, DropdownItem, DropdownMenu } from 'reactstrap'\nimport '../../css/NavBar.css'\nimport InputSearch from '../atoms/InputSearch'\nimport * as genreActions from '../../redux/actions/genreActions'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { COUNTRIES } from '../../asset/GlobalData'\n\nexport function NavBar(props) {\n    const [genreDropdownItems, setGenreDropdownItems] = useState([])\n    const [countryDropdownItems, setCountryDropdownItems] = useState([])\n    const countries = COUNTRIES\n\n    const [show, setShow] = useState({ ...props.showNav })\n    const [isTransparent, setIsTransparent] = useState({ ...props.isTransparent })\n    const [isOpen, setIsOpen] = useState(false)\n    const toggle = () => setIsOpen(!isOpen)\n\n    useEffect(() => {\n        setShow(props.showNav)\n    }, [props.showNav])\n\n    useEffect(() => {\n        setIsTransparent(props.isTransparent)\n    }, [props.isTransparent])\n\n    useEffect(() => {\n        props.actions.loadGenres()\n        let items = []\n        countries.map((country, index) => {\n            items.push(\n                <DropdownItem key={index}>\n                    {country}\n                </DropdownItem>\n            )\n        })\n        setCountryDropdownItems(items)\n    }, [])\n\n    useEffect(() => {\n        if (props.genres.length > 0) {\n            let items = []\n            props.genres.map((genre, index) => {\n                items.push(\n                    <DropdownItem key={index}>\n                        {genre.name}\n                    </DropdownItem>\n                )\n            })\n            setGenreDropdownItems(items)\n        }\n    }, [props.genres])\n\n    return (\n        <Navbar fixed=\"top\" dark expand=\"md\" \n            className={ `${show ? 'nav-show' : 'nav-hide'} ${isTransparent ? 'transparent-nav' : 'non-transparent'}`}\n        >\n            <NavLink to=\"/\" className=\"navbar-brand\" >Home</NavLink>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"mr-auto\" navbar>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Genre\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                            { genreDropdownItems }\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Country\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                           { countryDropdownItems }\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/toprated\">Top Rated</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/popular\">Popular</NavLink>\n                    </NavItem>\n                </Nav>\n                <NavItem className=\"input-search\">\n                    <InputSearch />\n                </NavItem>\n            </Collapse>\n        </Navbar>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres.length === 0 \n            ? [] \n            : state.genres,\n\n        textColor: state.navbar.textColor,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadGenres: bindActionCreators(genreActions.loadGenres, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)\n","import { handleResponse, handleError } from \"./apiUtils\"\nimport { BASE_URL, NOW_PLAYING_URL, POPULAR_URL, TOP_RATED_URL, API_KEY } from '../asset/GlobalData'\nimport axios from 'axios'\n\nexport function getNowPlayingMovies() {\n    let url = BASE_URL + NOW_PLAYING_URL + API_KEY + \"&page=1\"\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}\n\nexport function getPopularMovies() { //from 20 pages\n    const getPopularMoviesFuncs = []\n    for (let i = 1; i <= 20; i++) {\n        getPopularMoviesFuncs.push(getPopularMoviesFromOnePage(i))\n    }\n\n    return Promise.all(getPopularMoviesFuncs)\n    .then(function (responses) {\n        const combinedData = []\n        responses.map(res => {\n            if (res.data.results) {\n                combinedData.push(...res.data.results)\n            }\n        })\n        return combinedData\n    })\n    .catch(handleError)\n}\n\nfunction getPopularMoviesFromOnePage(pageNumber) {\n    let url = BASE_URL + POPULAR_URL + API_KEY + `&page=${pageNumber}`\n    return axios.get(url)\n}\n\nexport function getTopRatedMovies() {\n    const getTopRatedMoviesFuncs = []\n    for (let i = 1; i <= 20; i++) {\n        getTopRatedMoviesFuncs.push(getTopRatedMoviesFromOnePage(i))\n    }\n\n    return Promise.all(getTopRatedMoviesFuncs)\n    .then(function (responses) {\n        const combinedData = []\n        responses.map(res => {\n            if (res.data.results) {\n                combinedData.push(...res.data.results)\n            }\n        })\n        return combinedData\n    })\n    .catch(handleError)\n}\n\nfunction getTopRatedMoviesFromOnePage(pageNumber) {\n    let url = BASE_URL + TOP_RATED_URL + API_KEY + `&page=${pageNumber}`\n    return axios.get(url)\n}","import * as movieApi from '../../api/movieApi'\nimport * as actionTypes from './actionTypes'\n\nexport function loadNowPlayingMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_NOW_PLAYING_MOVIE_SUCCESS, movies }\n}\n\nexport function loadRecommendedMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_RECOMMENDED_MOVIE_SUCCESS, movies }\n}\n\nexport function loadPopularMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_POPULAR_MOVIE_SUCCESS, movies }\n}\n\nexport function loadTopRatedMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_TOP_RATED_MOVIE_SUCCESS, movies }\n}\n\nexport function loadNowPlayingMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getNowPlayingMovies()\n            .then(res => {\n                let nowPlayingList = []\n                let recommendedList = []\n\n                // get 5 movie for movie carousel \n                if (res.results < 0) return\n                if (res.results.length > 5) {\n                    for (let i = 0; i < 5; i++) {\n                        nowPlayingList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        nowPlayingList.push(movie)\n                    }\n                }\n\n                // get 20 movies for recomended movie list\n                if (res.results.length > 20) {\n                    for (let i = 0; i < 20; i++) {\n                        recommendedList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        recommendedList.push(movie)\n                    }\n                }\n\n                dispatch(loadNowPlayingMoviesSuccess(nowPlayingList))\n                dispatch(loadRecommendedMoviesSuccess(recommendedList))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n\nexport function loadPopularMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getPopularMovies()\n            .then(res => {\n                dispatch(loadPopularMoviesSuccess(res))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n\nexport function loadTopRatedMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getTopRatedMovies()\n            .then(res => {\n                dispatch(loadTopRatedMoviesSuccess(res))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n","import * as actionTypes from './actionTypes'\n\nexport function setHomepage(value) {\n    return { type: actionTypes.SET_HOME_PAGE, value }\n}","import React, { useState, useEffect } from 'react'\nimport { Carousel, CarouselItem, CarouselControl, CarouselIndicators, CarouselCaption } from 'reactstrap'\nimport { POSTER_BASE_URL } from '../../asset/GlobalData'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport '../../css/MovieCarousel.css'\n\nexport function MovieCarousel(props) {\n    const [activeIndex, setActiveIndex] = useState(0)\n    const [animating, setAnimating] = useState(false)\n    const [items, setItems] = useState([])\n\n    useEffect(() => {\n      if (props.nowPlaying) {\n        const newItems = []\n        props.nowPlaying.map((movie, index) => {\n          // isImageDark(`${POSTER_BASE_URL}${movie.backdrop_path}`, index)\n          newItems.push({\n            src: `${POSTER_BASE_URL}${movie.backdrop_path}`,\n            altText: movie.original_title,\n            caption: movie.original_title,\n            overview: movie.overview,\n          })\n        })\n        setItems(newItems)\n      }\n    }, [props.nowPlaying])\n\n    const next = () => {\n        if (animating) return\n        const nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1\n        setActiveIndex(nextIndex)\n    }\n\n    const previous = () => {\n        if (animating) return\n        const nextIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1\n        setActiveIndex(nextIndex)\n    }\n\n    const goToIndex = (newIndex) => {\n        if (animating) return\n        setActiveIndex(newIndex)\n    }\n\n    const slides = items.map((item) => {\n        return (\n          <CarouselItem\n            onExiting={() => setAnimating(true)}\n            onExited={() => setAnimating(false)}\n            key={item.src}\n          >\n            <img src={item.src} alt={item.altText} />\n            <CarouselCaption className={props.textColor} captionText={item.overview} captionHeader={item.caption} />\n          </CarouselItem>\n        )\n    })\n\n  //   const isImageDark = function(imageSrc, index) {\n  //     var img = document.createElement(\"img\")\n  //     img.src = imageSrc\n  //     img.setAttribute('crossOrigin', '')\n  //     img.style.display = \"none\"\n  //     document.body.appendChild(img)\n  \n  //     var fuzzy = 0.1\n\n  //     img.onload = function() {\n  //         var canvas = document.createElement(\"canvas\")\n  //         canvas.width = this.width\n  //         canvas.height = this.height\n  \n  //         var ctx = canvas.getContext(\"2d\")\n  //         ctx.drawImage(this,0,0)\n  \n  //         var imageData = ctx.getImageData(0,0,canvas.width,canvas.height)\n  //         var data = imageData.data\n  //         var r,g,b, max_rgb\n  //           var light = 0, dark = 0\n  \n  //         for(var x = 0, len = data.length; x < len; x+=4) {\n  //             r = data[x]\n  //             g = data[x+1]\n  //             b = data[x+2]\n  \n  //             max_rgb = Math.max(Math.max(r, g), b)\n  //             if (max_rgb < 128)\n  //                 dark++\n  //             else\n  //                 light++\n  //         }\n\n  //         var dl_diff = ((light - dark) / (this.width * this.height))\n  //         if (dl_diff + fuzzy < 0) { //dark image\n  //           const newTextColors = [...navbarTextColors, navbarTextColors[index] = 'light']\n  //         } else { //light image\n  //           const newTextColors = [...navbarTextColors, navbarTextColors[index] = 'dark']\n  //         }\n  //     }\n  // }\n\n  return (\n      <Carousel \n              activeIndex={activeIndex}\n              next={next}\n              previous={previous}\n          >\n\n          <CarouselIndicators items={items} activeIndex={activeIndex} onClickHandler={goToIndex} />\n              {slides}\n          <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous} />\n          <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next} />\n      </Carousel>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n      nowPlaying: state.movies.nowPlaying.length === 0 \n          ? [] \n          : state.movies.nowPlaying,\n  }\n}\n\nexport default connect(mapStateToProps)(MovieCarousel)","import React from 'react'\n\nexport default function SectionHeading(props) {\n    const styles = {\n        sectionTitle: {\n            'margin': '2rem 0 0 0'\n        },\n    }\n\n    return (\n        <div className=\"section-heading\">\n            <h2 className=\"section-title\" style={styles.sectionTitle}>{props.sectionTitle}</h2>\n        </div>\n    )\n}\n","import React from 'react'\nimport { TiInfoLarge, TiStar } from \"react-icons/ti\"\nimport { MOVIE_IMAGE_URL } from '../../asset/GlobalData'\nimport '../../css/MovieCard.css'\nimport { connect } from 'react-redux'\n\nexport function MovieCard(props) {\n    const getGenreNamesFromIds = (genreIds) => {\n        let genreNames = []\n        props.genres.map(genre => {\n            for(let genreId of genreIds) {\n                if (genre.id === genreId) {\n                    genreNames.push(genre.name)\n                }\n            }\n        })\n        genreNames = genreNames.join(', ')\n        return genreNames\n    }\n\n    return (\n        <div className=\"card-container\">\n            <div className=\"image-card\">\n                <img className=\"movie-img\" src={MOVIE_IMAGE_URL + props.movie.poster_path} alt={props.movie.title}/>\n                <div className=\"movie-info\">\n                    <TiInfoLarge color=\"#fff\" />\n                    <div className=\"info-text\">\n                        <h3 className=\"title\">{props.movie.title}</h3>\n                        <p className=\"overview\">{props.movie.overview}</p>\n                        <p className=\"genre\">{\"Genre: \" + getGenreNamesFromIds(props.movie.genre_ids)}</p>\n                        <p className=\"release-date\">{props.movie.release_date}</p>\n                        <p className=\"rate\">\n                            <TiStar color=\"yellow\" size={22} />\n                            {props.movie.vote_average}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres\n    }\n}\n\nexport default connect(mapStateToProps)(MovieCard)\n","import React from 'react'\nimport MovieCard from '../atoms/MovieCard'\n\nexport default function MovieList(props) {\n    const movieCards = props.movieList.map(movie => (\n        <MovieCard key={movie.id} movie={movie}/>\n    ))\n\n    return (\n        <div className=\"movie-list\">\n            { movieCards }\n        </div>\n    )\n}\n","import React, { useState ,useEffect } from 'react'\nimport SectionHeading from '../atoms/SectionHeading'\nimport MovieList from '../molecules/MovieList'\nimport { Container, Row, Col } from 'reactstrap'\n\nimport { sectionNames } from '../../asset/GlobalData'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport '../../css/MovieSection.css'\n\nexport function MovieSection(props) {\n    const [title, setTitle] = useState(\"\")\n    const [movies, setMovies] = useState([])\n\n    useEffect(() => {\n        setTitle(props.sectionName)\n        switch(props.sectionName) {\n            case sectionNames.RECOMMENDED_MOVIES:\n                setMovies(props.recommended)\n            break\n\n            case sectionNames.LATEST_MOVIES:\n            break\n\n            case sectionNames.TRENDING_MOVIES:\n            break\n        }\n    }, [props.recommended])\n\n    return (\n        <Container className=\"movie-section\">\n            <div>\n                <SectionHeading sectionTitle={title}/>\n            </div>\n            <div>\n                <MovieList movieList={movies} />\n            </div>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        recommended: state.movies.recommendedMovies.length === 0 \n            ? [] \n            : state.movies.recommendedMovies\n    }\n}\n  \nfunction mapDispatchToProps(dispatch) {\nreturn {\n    actions: {\n\n    }\n}\n}\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(MovieSection)","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport { sectionNames } from '../../asset/GlobalData'\nimport MovieCarousel from '../atoms/MovieCarousel'\nimport MovieSection from '../organisms/MovieSection'\nimport { Container, Row } from 'reactstrap'\nimport '../../css/Home.css'\n\nexport function Home(props) {\n    useEffect(() => {\n        props.actions.setHomePage(true)\n        props.actions.loadNowPlayingMovies()\n    }, [])\n\n    return (\n        <Container>\n            <Row>\n                <MovieCarousel />\n            </Row>\n            <Row>\n                <MovieSection sectionName={sectionNames.RECOMMENDED_MOVIES} />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        nowPlaying: state.movies.nowPlaying.length === 0 \n            ? [] \n            : state.movies.nowPlaying\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadNowPlayingMovies: bindActionCreators(movieActions.loadNowPlayingMovies, dispatch),\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React from 'react'\n\nexport default function MovieDetails() {\n    return (\n        <div>\n            Movie Detail\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { COUNTRIES, YEARS, SORT_OPTIONS } from '../../asset/GlobalData'\n\nimport { UncontrolledDropdown, DropdownToggle, Nav, DropdownMenu, NavItem, Button } from 'reactstrap'\nimport \"../../css/FilterBar.css\"\nimport { TiFilter, TiArrowUnsorted } from \"react-icons/ti\"\nimport { AiOutlineGlobal, AiTwotoneCalendar, AiTwotoneFolderOpen } from \"react-icons/ai\"\n\nexport function FilterBar(props) {\n    const countries = COUNTRIES\n    const years = YEARS\n    const sorts = SORT_OPTIONS\n    const [countryDropdownItems, setCountryDropdownItems] = useState([])\n    const [yearDropdownItems, setYearDropdownItems] = useState([])\n    const [sortDropdownItems, setSortDropdownItems] = useState([])\n    const [genreDropdownItems, setGenreDropdownItems] = useState([])\n    const [genreCheckBoxsState, setGenreCheckBoxsState] = useState({})\n    const [yearCheckBoxsState, setYearCheckBoxsState] = useState({})\n    const [countryCheckBoxsState, setCountryCheckBoxsState] = useState({})\n    const [sortCheckBoxsState, setSortCheckBoxsState] = useState({})\n\n    const [genreValueText, setGenreValueText] = useState('All')\n    const [yearValueText, setYearValueText] = useState('All')\n    const [countryValueText, setCountryValueText] = useState('All')\n    const [sortValueText, setSortValueText] = useState('All')\n    \n    const hanldeGenreCheckBoxsChange = (event) => {\n        const { name, checked } = event.target\n        setGenreCheckBoxsState(prevState => ({ ...prevState, [name]: checked }))\n    }\n\n    const hanldeYearCheckBoxsChange = (event) => {\n        const { name, checked } = event.target\n        setYearCheckBoxsState(prevState => ({ ...prevState, [name]: checked }))\n    }\n\n    const hanldeCountryCheckBoxsChange = (event) => {\n        const { name, checked } = event.target\n        setCountryCheckBoxsState(prevState => ({ ...prevState, [name]: checked }))\n    }\n\n    const hanldeSortCheckBoxsChange = (event) => {\n        const { value } = event.target\n        setSortCheckBoxsState(prevState => ({ ...prevState, \"sort-type\": value }))\n        setSortValueText(value)\n    }\n\n    const getObjLength = (obj) => {\n        return Object.keys(obj).length\n    }\n\n    const getChecked = (obj) => {\n        const length = getObjLength(obj)\n        if (length === 0) return 0\n        return Object.values(obj).reduce((count, item) => count + (item === true ? 1 : 0), 0)\n    }\n\n    const getCheckedValue = (obj) => {\n        return Object.keys(obj).find(key => obj[key] === true)\n    }\n\n    useEffect(() => {\n        let countryItems = []\n        let yearItems = []\n        let sortItems = []\n\n        countries.map((country, index) => {\n            countryItems.push(\n                <div key={index} className=\"dropdown-item country-filter-item\">\n                    <input type=\"checkbox\" name={country} \n                        checked={countryCheckBoxsState[country]} \n                        onChange={hanldeCountryCheckBoxsChange} \n                    />\n                    {country}\n                </div>\n            )\n        })\n\n        years.map((year, index) => {\n            yearItems.push(\n                <div key={index} className=\"dropdown-item year-filter-item\">\n                    <input type=\"checkbox\" name={year} \n                        checked={yearCheckBoxsState[year]} \n                        onChange={hanldeYearCheckBoxsChange} \n                    />\n                    {year}\n                </div>\n            )\n        })\n\n        sorts.map((sort, index) => {\n            sortItems.push(\n                <div key={index} className=\"dropdown-item sort-filter-item\">\n                    <input type=\"radio\" name={sort} \n                        name=\"sort-type\"\n                        value={sort} \n                        onChange={hanldeSortCheckBoxsChange} \n                    />\n                    {sort}\n                </div>\n            )\n        })\n\n        setCountryDropdownItems(countryItems)\n        setYearDropdownItems(yearItems)\n        setSortDropdownItems(sortItems)\n    }, [])\n\n\n\n    useEffect(() => {\n        if (props.genres.length > 0) {\n            let items = []\n            props.genres.map((genre, index) => {\n                items.push(\n                    <div key={index} className=\"dropdown-item genre-filter-item\">\n                        <input type=\"checkbox\" name={genre.name} \n                            checked={genreCheckBoxsState[genre.name]} \n                            onChange={hanldeGenreCheckBoxsChange} \n                        />\n                        {genre.name}\n                    </div>\n                )\n            })\n            setGenreDropdownItems(items)\n        }\n    }, [props.genres])\n\n    useEffect(() => {\n        const genresChecked = getChecked(genreCheckBoxsState)    \n        if (genresChecked === 0) {\n            setGenreValueText('All')\n        } else {\n            if (genresChecked === 1) {\n                let genre = getCheckedValue(genreCheckBoxsState)\n                setGenreValueText(genre)\n            } else {\n                setGenreValueText(`${genresChecked} selected`)\n            }\n        }\n    }, [genreCheckBoxsState])\n\n    useEffect(() => {\n        const yearsChecked = getChecked(yearCheckBoxsState)    \n        console.log(\"checked = \" + yearsChecked)\n        if (yearsChecked === 0) {\n            setYearValueText('All')\n        } else {\n            if (yearsChecked === 1) {\n                let year = getCheckedValue(yearCheckBoxsState)\n                setYearValueText(year)\n            } else {\n                setYearValueText(`${yearsChecked} selected`)\n            }\n        }\n    }, [yearCheckBoxsState])\n\n    useEffect(() => {\n        const countryChecked = getChecked(countryCheckBoxsState)    \n        console.log(\"checked = \" + countryChecked)\n        if (countryChecked === 0) {\n            setCountryValueText('All')\n        } else {\n            if (countryChecked === 1) {\n                let year = getCheckedValue(countryCheckBoxsState)\n                setCountryValueText(year)\n            } else {\n                setCountryValueText(`${countryChecked} selected`)\n            }\n        }\n    }, [countryCheckBoxsState])\n\n    return (\n        <div className=\"filter-bar-wrapper\">\n            <Nav>\n                <UncontrolledDropdown nav inNavbar>\n                    <DropdownToggle nav caret>\n                        <AiTwotoneFolderOpen /> \n                        Genre \n                        <div className=\"genre-value\">{genreValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                        { genreDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar className=\"year-filter\">\n                    <DropdownToggle nav caret>\n                        <AiTwotoneCalendar /> Year\n                        <div className=\"year-value\">{yearValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                        { yearDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar>\n                    <DropdownToggle nav caret>\n                        <AiOutlineGlobal /> Country\n                        <div className=\"country-value\">{countryValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                       { countryDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar className=\"sort-filter\">\n                    <DropdownToggle nav caret>\n                        <TiArrowUnsorted /> Sort\n                        <div className=\"sort-value\">{sortValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                       { sortDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <NavItem>\n                    <Button color=\"info\"><TiFilter /> Filter</Button>\n                </NavItem>\n            </Nav>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres.length === 0 \n            ? [] \n            : state.genres\n    }\n}\n\nexport default connect(mapStateToProps)(FilterBar)\n","import React, { useState, useEffect } from \"react\"\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\"\nimport '../../css/PaginationBar.css'\n\nexport default function PaginationBar({ moviesPerPage, totalMovies, currentPage, paginate, link }) {\n    const [pageNumbers, setPageNumbers] = useState(0)\n    const [paginationItems, setPaginationItems] = useState([])\n    const [activePage, setActivePage] = useState(currentPage)\n\n    const firstPageClick = () => {\n        paginate(1)\n        setActivePage(1)\n    }\n\n    const prePageClick = () => {\n        if (currentPage > 1) {\n            paginate(currentPage - 1)\n            setActivePage(currentPage - 1)\n        }\n    }\n\n    const nextPageClick = () => {\n        if (currentPage < pageNumbers.length) {\n            paginate(currentPage + 1)\n            setActivePage(currentPage + 1)\n        }\n    }\n\n    const lastPageClick = () => {\n        const lastIndex = pageNumbers.length\n        paginate(lastIndex)\n        setActivePage(lastIndex)\n    }\n\n    const pageClick = (number) => {\n        paginate(number)\n        setActivePage(number)\n    }\n\n    useEffect(() => {\n        setActivePage(currentPage)\n    }, [currentPage])\n\n    useEffect(() => {\n        let pageNum = []\n        for (let i = 1; i <= Math.ceil(totalMovies / moviesPerPage); i++) {\n            pageNum.push(i)\n        }\n        setPageNumbers(pageNum)\n    }, [totalMovies])\n\n    useEffect(() => {\n        if (pageNumbers.length > 0) {\n            const items = pageNumbers.map(number => (\n                <PaginationItem key={number} className={activePage === number ? 'active-page' : ''}>\n                    <PaginationLink href={link} onClick={()=> pageClick(number)}>{number}</PaginationLink>\n                </PaginationItem>\n            ))\n            setPaginationItems(items)\n        } else {\n            setPaginationItems([])\n        }\n    }, [pageNumbers, activePage])\n\n    return (\n        <Pagination aria-label=\"Page navigation example\">\n            <PaginationItem>\n                <PaginationLink first href={link} onClick={firstPageClick} />\n            </PaginationItem>\n            <PaginationItem>\n                <PaginationLink previous href={link} onClick={prePageClick} />\n            </PaginationItem>\n                {paginationItems}\n            <PaginationItem>\n                <PaginationLink next href={link} onClick={nextPageClick} />\n            </PaginationItem>\n            <PaginationItem>\n                <PaginationLink last href={link} onClick={lastPageClick} />\n            </PaginationItem>\n        </Pagination>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Container, Row } from 'reactstrap'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\n\nexport function TopRatedMovies(props) {\n    const [movies, setMovies] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const moviesPerPage = 40\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = movies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        topRatedMovieContainer: {\n            'margin': '0 1rem'\n        },\n        filterBar: {\n            'margin': '8rem 0 0 0'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        if (movies.length === 0) {\n            props.actions.loadTopRatedMovies()\n        }\n    }, [])\n\n\n    useEffect(() => {\n        setMovies(props.topRatedMovies)\n    }, [props.topRatedMovies])\n    return (\n        <Container id=\"top-rated-movies\">\n            <Row className=\"filter-bar\" style={styles.filterBar}>\n                <FilterBar />\n            </Row>\n            <Row className=\"top-rated-movies\">\n                <div className=\"top-rated-movie-list\" style={styles.topRatedMovieContainer}>\n                    <MovieList movieList={currentMovies} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                <PaginationBar moviesPerPage={moviesPerPage} totalMovies={movies.length} \n                    currentPage={currentPage} paginate={paginate} link=\"#top-rated-movies\" />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        topRatedMovies: state.movies.topRatedMovies.length === 0 \n            ? [] \n            : state.movies.topRatedMovies\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadTopRatedMovies: bindActionCreators(movieActions.loadTopRatedMovies, dispatch),\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopRatedMovies)","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport { Container, Row } from 'reactstrap'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\n\nexport function PopularMovies(props) {\n    const [movies, setMovies] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const moviesPerPage = 40\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = movies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        popularMovieContainer: {\n            'margin': '0 1rem'\n        },\n        filterBar: {\n            'margin': '8rem 0 0 0'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        if (movies.length === 0) {\n            props.actions.loadPopularMovies()\n        }\n    }, [])\n\n\n    useEffect(() => {\n        setMovies(props.popularMovies)\n    }, [props.popularMovies])\n\n    return (\n        <Container id=\"popular-movies\">\n            <Row className=\"filter-bar\" style={styles.filterBar}>\n                <FilterBar />\n            </Row>\n            <Row className=\"popular-movies\">\n                <div className=\"popular-movie-list\" style={styles.popularMovieContainer}>\n                    <MovieList movieList={currentMovies} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                <PaginationBar moviesPerPage={moviesPerPage} totalMovies={movies.length} \n                    currentPage={currentPage} paginate={paginate} link=\"#popular-movies\" />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        popularMovies: state.movies.popularMovies.length === 0 \n            ? [] \n            : state.movies.popularMovies\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadPopularMovies: bindActionCreators(movieActions.loadPopularMovies, dispatch),\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PopularMovies)","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Container, Row } from 'reactstrap'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\nimport axios from 'axios'\nimport { BASE_URL, SEARCH_URL, API_KEY } from '../../asset/GlobalData'\n\nexport function SearchPage(props) {\n    const [movies, setMovies] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const [searchString, setSearchString] = useState(\"\")\n    const moviesPerPage = 40\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = movies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        searchTitle: {\n            'margin': '8rem 0 0 0'\n        },\n        searchMovieContainer: {\n            'margin': '0 1rem'\n        },\n        filterBar: {\n            'margin': '2rem 0'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    const getSearchMovies = (searchString) => {\n        const getSearchMoviesFuncs = []\n        for (let i = 1; i <= 20; i++) {\n            getSearchMoviesFuncs.push(getSearchMoviesFromOnePage(i, searchString))\n        }\n\n        Promise.all(getSearchMoviesFuncs)\n            .then(function (responses) {\n                const combinedData = []\n                responses.map(res => {\n                    if (res.data.results) {\n                        combinedData.push(...res.data.results)\n                    }\n                })\n                setMovies(combinedData)\n            })\n            .catch(error => {\n                console.error(\"API call failed. \" + error)\n                throw error\n            }) \n    }\n\n    const getSearchMoviesFromOnePage = (pageNumber, searchString) => {\n        let url = BASE_URL + SEARCH_URL + API_KEY + `&query=${searchString}&page=${pageNumber}`\n        return axios.get(url)\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        if (props.location.state) {\n            let searchQuery = props.location.state.searchString\n            setSearchString(searchQuery)\n            getSearchMovies(searchQuery)\n            if (movies.length === 0) {\n                getSearchMovies(searchQuery)\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        if (props.location.state) {\n            let searchQuery = props.location.state.searchString\n            if (searchQuery !== searchString) {\n                setSearchString(searchQuery)\n                getSearchMovies(searchQuery)\n            }\n        }\n    }, [props.location.state])\n\n\n    return (\n        <Container id=\"search-movies\">\n            <Row className=\"search-title\" style={styles.searchTitle}>\n                <h2>\n                    {`Results for: ${searchString}`}\n                </h2>\n            </Row>\n            <Row className=\"filter-bar\" style={styles.filterBar}>\n                <FilterBar/>\n            </Row>\n            <Row className=\"search-movies\">\n                <div className=\"serch-movie-list\" style={styles.searchMovieContainer}>\n                    <MovieList movieList={currentMovies} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                <PaginationBar moviesPerPage={moviesPerPage} totalMovies={movies.length} \n                    currentPage={currentPage} paginate={paginate} link=\"#search-movies\" />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        \n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage)\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport './css/App.css'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Navbar from './components/commons/NavBar'\nimport Home from './components/pages/Home'\nimport MovieDetails from './components/pages/MovieDetails'\nimport TopRatedMovies from './components/pages/TopRatedMovies'\nimport PopularMovies from './components/pages/PopularMovies'\nimport SearchPage from './components/pages/SearchPage'\n\n// axios.defaults.baseURL = 'https://...'\nfunction App(props) {\n  const [showNav, setShowNav] = useState(true)\n  const [transparentNav, setTransparentNav] = useState(true)\n  const [scrolledPosition, setSrolledPosition] = useState(0)\n  const [carouselHeight, setCarouselHeight] = useState(0)\n\n  const handleScroll = () => {\n    if (!props.homepage) {\n      setTransparentNav(false)\n      setShowNav(true)\n      return\n    }\n\n    const currentPosition = window.pageYOffset\n\n    if (carouselHeight <= 0 ) {\n      if (document.querySelector('.carousel')) {\n        const height = document.querySelector('.carousel').clientHeight\n        setCarouselHeight(height)\n      }\n    }\n\n    // show/hide navbar when scroll\n    if (scrolledPosition > currentPosition) {\n      setShowNav(true)\n    } else {\n      setShowNav(false)\n    }\n\n    // make change navbar background when carousel is not in view port\n    if (currentPosition > carouselHeight) {\n      setTransparentNav(false)\n    } else {\n      setTransparentNav(true)\n    }\n\n    setSrolledPosition(currentPosition)\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll)\n    }\n  })\n\n  useEffect(() => {\n    if (props.homepage) {\n      const currentPosition = window.pageYOffset\n      if(currentPosition === 0) {\n        setTransparentNav(true)\n      } else {\n        setTransparentNav(false)\n      }\n    } else {\n      setTransparentNav(false)\n    }\n  }, [props.homepage])\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar showNav={showNav} isTransparent={transparentNav} />\n        <Switch>\n          <Route path=\"/popular\" component={PopularMovies} />\n          <Route path=\"/toprated\" component={TopRatedMovies} />\n          <Route path=\"/details\" component={MovieDetails} />\n          <Route path='/search' component={SearchPage} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n      homepage: state.navbar.homepage\n  }\n}\n\nexport default connect(mapStateToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    nowPlaying: [],\n    searchMovies: [],\n    recommendedMovies: [],\n    topRatedMovies: [],\n    popularMovies: [],\n}\n\nexport default function movieReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.LOAD_NOW_PLAYING_MOVIE_SUCCESS: \n            return { ...state, nowPlaying: action.movies }\n        case actionTypes.LOAD_RECOMMENDED_MOVIE_SUCCESS:\n            return { ...state, recommendedMovies: action.movies }\n        case actionTypes.LOAD_POPULAR_MOVIE_SUCCESS:\n            return { ...state, popularMovies: action.movies }\n        case actionTypes.LOAD_TOP_RATED_MOVIE_SUCCESS:\n            return { ...state, topRatedMovies: action.movies }\n        case actionTypes.LOAD_LATEST_MOVIES:\n            return { ...state, latestMovies: action.latestMovies }\n        case actionTypes.LOAD_TRENDING_MOVIES:\n            return { ...state, trendingMovies: action.trendingMovies }\n        default:\n            return state\n    }\n}","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    homepage: true\n}\n\nexport default function navbarReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.SET_HOME_PAGE:\n            return { ...state, homepage: action.value }\n        default:\n            return state\n    }\n}","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    genre: [],\n    year: 0,\n    country: 'All',\n    sort: 'Default',\n}\n\nexport default function filterbarReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.SET_FILTER_OPTION:\n            return { state: action.options }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport genres from './genreReducer'\nimport movies from './movieReducer'\nimport navbar from './navbarReducer'\nimport filterbar from './filterbarReducer'\n\nconst rootReducer = combineReducers({\n    genres,\n    movies,\n    navbar,\n    filterbar\n})\n\nexport default rootReducer","import * as actionTypes from '../actions/actionTypes'\n\nexport default function genreReducer(state = [], action) {\n    switch(action.type) {\n        case actionTypes.LOAD_GENRES_SUCCESS: \n            return action.genres\n        default:\n            return state\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './redux/configureStore'\nimport { Provider as ReduxProvider } from 'react-redux'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ReduxProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, compose } from 'redux'\nimport rootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport { applyMiddleware } from 'redux'\n\nexport default function configureStore(initialState) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n    return createStore(\n        rootReducer,\n        initialState,\n        composeEnhancers(applyMiddleware(thunk))\n    )\n} "],"sourceRoot":""}
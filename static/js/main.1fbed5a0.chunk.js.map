{"version":3,"sources":["components/atoms/InputSearch.js","api/apiUtils.js","asset/GlobalData.js","redux/actions/genreActions.js","api/genreApi.js","redux/actions/actionTypes.js","components/commons/NavBar.js","api/movieApi.js","redux/actions/movieActions.js","redux/actions/navbarActions.js","components/atoms/MovieCarousel.js","components/atoms/SectionHeading.js","components/atoms/MovieCard.js","components/molecules/MovieList.js","components/organisms/MovieSection.js","components/pages/Home.js","components/molecules/CastInfoCard.js","components/molecules/SwiperMovies.js","components/organisms/RecommendedMovies.js","components/pages/MovieDetails.js","redux/actions/filterbarActions.js","asset/FilterFunctions.js","components/molecules/FilterBar.js","components/molecules/PaginationBar.js","components/pages/TopRatedMovies.js","components/pages/PopularMovies.js","components/pages/SearchPage.js","components/pages/MoviesByGenre.js","components/pages/MoviesByCountry.js","App.js","serviceWorker.js","redux/reducers/movieReducer.js","redux/reducers/navbarReducer.js","redux/reducers/filterbarReducer.js","redux/reducers/index.js","redux/reducers/genreReducer.js","index.js","redux/configureStore.js"],"names":["InputSearch","history","useHistory","useState","searchString","setSearchString","className","onSubmit","e","preventDefault","length","push","alert","type","placeholder","value","onChange","event","target","handleResponse","response","a","status","data","text","error","Error","handleError","console","API_KEY","BASE_URL","MOVIE_IMAGE_URL","sectionNames","COUNTRIES","YEARS","SORT_OPTIONS","loadGenres","dispatch","axios","get","then","catch","res","genres","connect","state","textColor","navbar","actions","bindActionCreators","genreActions","props","genreDropdownItems","setGenreDropdownItems","countryDropdownItems","setCountryDropdownItems","countries","showNav","show","setShow","isTransparent","setIsTransparent","isOpen","setIsOpen","useEffect","items","map","country","index","to","key","genre","name","Navbar","fixed","dark","expand","NavbarToggler","onClick","Collapse","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","NavItem","getPopularMoviesFromOnePage","pageNumber","url","getTopRatedMoviesFromOnePage","loadNowPlayingMovies","nowPlayingList","recommendedList","results","i","movie","movies","loadRecommendedMoviesSuccess","loadUpcomingMovies","upcomingList","loadPopularMovies","getPopularMoviesFuncs","Promise","all","responses","combinedData","movieApi","loadTopRatedMovies","getTopRatedMoviesFuncs","setHomepage","nowPlaying","activeIndex","setActiveIndex","animating","setAnimating","setItems","newItems","src","backdrop_path","altText","original_title","caption","overview","next","nextIndex","previous","slides","item","CarouselItem","onExiting","onExited","alt","CarouselCaption","captionText","captionHeader","Carousel","CarouselIndicators","onClickHandler","newIndex","CarouselControl","direction","directionText","SectionHeading","style","color","sectionTitle","redirect","id","poster_path","title","changeId","genreIds","genreNames","genreId","join","getGenreNamesFromIds","genre_ids","release_date","size","vote_average","MovieList","movieCards","movieList","recommended","recommendedMovies","upcoming","upcomingMovies","setTitle","setMovies","sectionName","Container","movieActions","setHomePage","navbarActions","styles","sectionContainer","Row","CastInfoCard","cardContainer","cardImage","cardText","SwiperMovies","navigation","nextEl","prevEl","pagination","el","clickable","dynamicBullets","spaceBetween","breakpoints","1350","slidesPerView","1000","650","300","freeMode","shouldSwiperUpdate","swiperCards","setSwiperCards","movieId","slice","getRecommendedMovies","setMovie","setGenres","movieCredits","setMovieCredits","castInfoCards","setCastInfoCards","trailer","setTrailer","match","params","getMovieDetails","getMovieCredits","officialTrailer","find","availableTrailer","getTrailers","movieGenre","getGenreNames","cast","credit_id","profile_path","Col","sm","xs","md","lg","runtime","vote_count","crew","director","crewMember","job","getDirectorName","setFilterOptions","options","clearFilter","setGenre","setCountry","getLanguageCode","countryName","getGenreIdsFromNames","allGenres","genreName","compareByDate","b","Date","compareByName","localeCompare","compareByRate","compareByView","popularity","filterGenre","genreConditions","every","condition","includes","filterYear","yearConditions","substring","filterCountry","countryConditions","original_language","languageCodes","getLanguageCodesFromCountryNames","sortMovies","sortType","sort","filterOptions","filterbar","filterbarActions","years","sorts","yearDropdownItems","setYearDropdownItems","sortDropdownItems","setSortDropdownItems","genreCheckBoxsState","setGenreCheckBoxsState","yearCheckBoxsState","setYearCheckBoxsState","countryCheckBoxsState","setCountryCheckBoxsState","sortCheckBoxsState","setSortCheckBoxsState","isClearingFilter","setIsClearingFilter","genreValueText","setGenreValueText","yearValueText","setYearValueText","countryValueText","setCountryValueText","sortValueText","setSortValueText","hanldeGenreCheckBoxsChange","checked","prevState","hanldeYearCheckBoxsChange","hanldeCountryCheckBoxsChange","hanldeSortCheckBoxsChange","getObjLength","obj","Object","keys","getChecked","values","reduce","count","getCheckedValue","getCheckedArray","checkedArray","entries","newYearState","unCheck","newCountryState","newGenreState","newObj","countryItems","yearItems","sortItems","year","yearsChecked","checkedYears","countryChecked","checkedCountries","sortValue","genresChecked","checkedGenres","Button","PaginationBar","moviesPerPage","totalMovies","currentPage","paginate","link","pageNumbers","setPageNumbers","paginationItems","setPaginationItems","activePage","setActivePage","pageNum","Math","ceil","number","PaginationItem","PaginationLink","href","pageClick","Pagination","aria-label","first","last","lastIndex","topRatedMovies","filteredMovies","setFilteredMovies","setCurrentPage","indexOfLastMovie","indexOfFirstMovie","currentMovies","pageContainer","pageTitle","topRatedMovieContainer","paginationBar","filteredMovieList","filterFunctions","filter","bind","filterMovies","popularMovies","popularMovieContainer","searchMovieContainer","searchTitle","getSearchMovies","getSearchMoviesFuncs","getSearchMoviesFromOnePage","location","searchQuery","genreMovieContainer","getMoviesByGenre","getMoviesFuncs","getMoviesByGenreFromOnePage","g","countryMovieContainer","getMoviesByCountryFromOnePage","languageCode","getMoviesByCountry","homepage","setShowNav","transparentNav","setTransparentNav","scrolledPosition","setSrolledPosition","carouselHeight","setCarouselHeight","handleScroll","currentPosition","window","pageYOffset","document","querySelector","height","clientHeight","addEventListener","removeEventListener","basename","path","component","PopularMovies","TopRatedMovies","MovieDetails","MoviesByGenre","MoviesByCountry","SearchPage","Home","Boolean","hostname","initialState","searchMovies","rootReducer","combineReducers","action","latestMovies","trendingMovies","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","configureStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1fbed5a0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { MdSearch } from \"react-icons/md\"\nimport '../../css/InputSearch.css'\nimport { useHistory } from 'react-router-dom'\n\nexport default function InputSearch() {\n    const history = useHistory()\n    const [searchString, setSearchString] = useState('')\n    const search = (e) => {\n        e.preventDefault()\n        if (searchString.length > 0) {\n            history.push('/search', {searchString: searchString})\n        } else {\n            alert('Please input search key words')\n        }\n    }\n\n    const handleChange = (event) => setSearchString(event.target.value)\n\n    return (\n        <form className=\"search-box\" onSubmit={search}>\n            <input type=\"text\" className=\"input\" placeholder=\"Movie name...\" value={searchString} onChange={handleChange} />\n            <button type=\"submit\" className=\"search-button\">\n                <MdSearch />\n            </button>\n        </form>\n    )\n}\n","export async function handleResponse(response) {\n    if (response.status === 200) {\n        return response.data\n    }\n    if (response.status === 400) {\n      const error = await response.text()\n      throw new Error(error)\n    }\n    throw new Error(\"Network response was not ok.\")\n  }\n  \n  export function handleError(error) {\n    console.error(\"API call failed. \" + error)\n    throw error\n  }\n  ","export const API_KEY = \"323c169d6502f84d4a8a225e5732db2c\"\nexport const BASE_URL = \"https://api.themoviedb.org/3/\"\nexport const GENRE_URL = 'genre/movie/list?api_key='\nexport const NOW_PLAYING_URL = 'movie/now_playing?api_key='\nexport const UPCOMING_URL = \"movie/upcoming?api_key=\"\nexport const POPULAR_URL = 'movie/popular?api_key='\nexport const TOP_RATED_URL = 'movie/top_rated?api_key='\nexport const SEARCH_URL = 'search/movie?api_key='\nexport const DETAILS_URL = 'movie/'\nexport const DISCOVER_URL = 'discover/movie?api_key='\nexport const POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w1280'\nexport const MOVIE_IMAGE_URL = 'https://image.tmdb.org/t/p/w500'\nexport const YOUTUBE_VIDEO_URL = 'https://www.youtube.com/embed/'\n\nexport const sectionNames = {\n    RECOMMENDED_MOVIES: \"Recommend Movies\",\n    UPCOMING_MOVIES: \"Upcoming Movies\",\n    TRENDING_MOVIES: \"Trending Movies\"\n}\n\nexport const COUNTRIES = [\n    \"United States\", \"France\", \"Canada\", \"Italy\", \"United Kingdom\", \"Russia\", \n    \"Korean\", \"Japan\", \"Hongkong\", \"China\", \"India\", \"Brazil\"\n]\n\nexport const YEARS = [\n    2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2011, 2010\n]\n\nexport const SORT_OPTIONS = [\n    \"Default\", \"Release Date\", \"Name\", \"Rate\", \"Most Watched\"\n]\n\nexport const LANGUAGES = [\n    \"en\", \"fr\", \"it\", \"ru\", \"ko\", \"ja\", \"zh\"\n]","import * as genreApi from '../../api/genreApi'\nimport * as actionTypes from './actionTypes'\n\nexport function loadGenresSuccess(genres) {\n    return { type: actionTypes.LOAD_GENRES_SUCCESS, genres }\n}\n\nexport function loadGenres() {\n    return function(dispatch) {\n        return genreApi\n            .getGenres()\n            .then(res => {\n                dispatch(loadGenresSuccess(res.genres))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}","import { handleResponse, handleError } from \"./apiUtils\"\nimport { BASE_URL, GENRE_URL, API_KEY } from '../asset/GlobalData'\nimport axios from 'axios'\n\nexport function getGenres() {\n    let url = BASE_URL + GENRE_URL + API_KEY\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}","export const LOAD_GENRES_SUCCESS = \"LOAD_GENRES_SUCCESS\"\n\nexport const SET_HOME_PAGE = \"SET_HOME_PAGE\"\n\nexport const SET_FILTER_OPTION = \"SET_FILTER_OPTION\"\nexport const CLEAR_FILTER = \"CLEAR_FILTER\"\nexport const SET_GENRE = \"SET_GENRE\"\nexport const SET_COUNTRY = \"SET_COUNTRY\"\n\n// #region movie actions\n\nexport const LOAD_NOW_PLAYING_MOVIE_SUCCESS = \"LOAD_NOW_PLAYING_MOVIE_SUCCESS\"\nexport const LOAD_RECOMMENDED_MOVIE_SUCCESS = \"LOAD_RECOMMENDED_MOVIE_SUCCESS\"\nexport const LOAD_UPCOMING_MOVIE_SUCCESS = \"LOAD_UPCOMING_MOVIE_SUCCESS\"\nexport const LOAD_POPULAR_MOVIE_SUCCESS = \"LOAD_POPULAR_MOVIE_SUCCESS\"\nexport const LOAD_TOP_RATED_MOVIE_SUCCESS = \"LOAD_TOP_RATED_MOVIE_SUCCESS\"\n\nexport const LOAD_NOW_PLAYING = \"LOAD_NOW_PLAYING\"\nexport const LOAD_LATEST_MOVIES = \"LOAD_LATEST_MOVIES\"\nexport const LOAD_TRENDING_MOVIES = \"LOAD_TRENDING_MOVIES\"\n\n//#endregion","import React, { useState, useEffect } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Navbar, NavbarToggler, Collapse, Nav, NavItem,\n    UncontrolledDropdown, DropdownToggle, DropdownMenu } from 'reactstrap'\nimport '../../css/NavBar.css'\nimport InputSearch from '../atoms/InputSearch'\nimport * as genreActions from '../../redux/actions/genreActions'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { COUNTRIES } from '../../asset/GlobalData'\n\nexport function NavBar(props) {\n    const [genreDropdownItems, setGenreDropdownItems] = useState([])\n    const [countryDropdownItems, setCountryDropdownItems] = useState([])\n    const countries = COUNTRIES\n\n    const [show, setShow] = useState({ ...props.showNav })\n    const [isTransparent, setIsTransparent] = useState({ ...props.isTransparent })\n    const [isOpen, setIsOpen] = useState(false)\n    const toggle = () => setIsOpen(!isOpen)\n\n    useEffect(() => {\n        setShow(props.showNav)\n    }, [props.showNav])\n\n    useEffect(() => {\n        setIsTransparent(props.isTransparent)\n    }, [props.isTransparent])\n\n    useEffect(() => {\n        props.actions.loadGenres()\n        let items = []\n        countries.map((country, index) => {\n            items.push(\n                <NavLink to={`/movies/country/${country}`} className=\"dropdown-item country\" key={index}>\n                    {country}\n                </NavLink>\n            )\n            return null\n        })\n        setCountryDropdownItems(items)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (props.genres.length > 0) {\n            let items = []\n            props.genres.map((genre, index) => {\n                items.push(\n                    <NavLink to={`/movies/genre/${genre.name}`} className=\"dropdown-item genre\" key={index} >\n                        {genre.name}\n                    </NavLink>\n                )\n                return null\n            })\n            setGenreDropdownItems(items)\n        }\n    }, [props.genres])\n\n    return (\n        <Navbar fixed=\"top\" dark expand=\"md\" \n            className={ `${show ? 'nav-show' : 'nav-hide'} ${isTransparent ? 'transparent-nav' : 'non-transparent'}`}\n        >\n            <NavLink to=\"/\" className=\"navbar-brand\" >Home</NavLink>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"mr-auto\" navbar>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Genre\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                            { genreDropdownItems }\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Country\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                           { countryDropdownItems }\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/toprated\">Top Rated</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink className=\"nav-link\" to=\"/popular\">Popular</NavLink>\n                    </NavItem>\n                </Nav>\n                <NavItem className=\"input-search\">\n                    <InputSearch />\n                </NavItem>\n            </Collapse>\n        </Navbar>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres.length === 0 \n            ? [] \n            : state.genres,\n\n        textColor: state.navbar.textColor,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadGenres: bindActionCreators(genreActions.loadGenres, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)\n","import { handleResponse, handleError } from \"./apiUtils\"\nimport { BASE_URL, NOW_PLAYING_URL, UPCOMING_URL, POPULAR_URL, TOP_RATED_URL, API_KEY } from '../asset/GlobalData'\nimport axios from 'axios'\n\nexport function getNowPlayingMovies() {\n    let url = BASE_URL + NOW_PLAYING_URL + API_KEY + \"&page=1\"\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}\n\nexport function getUpcomingMovies() {\n    let url = BASE_URL + UPCOMING_URL + API_KEY + \"&page=1\"\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}\n\nexport function getPopularMovies() { //from 20 pages\n    const getPopularMoviesFuncs = []\n    for (let i = 1; i <= 20; i++) {\n        getPopularMoviesFuncs.push(getPopularMoviesFromOnePage(i))\n    }\n\n    return Promise.all(getPopularMoviesFuncs)\n    .then(function (responses) {\n        const combinedData = []\n        responses.map(res => {\n            if (res.data.results) {\n                combinedData.push(...res.data.results)\n            }\n            return null\n        })\n        return combinedData\n    })\n    .catch(handleError)\n}\n\nfunction getPopularMoviesFromOnePage(pageNumber) {\n    let url = BASE_URL + POPULAR_URL + API_KEY + `&page=${pageNumber}`\n    return axios.get(url)\n}\n\nexport function getTopRatedMovies() {\n    const getTopRatedMoviesFuncs = []\n    for (let i = 1; i <= 20; i++) {\n        getTopRatedMoviesFuncs.push(getTopRatedMoviesFromOnePage(i))\n    }\n\n    return Promise.all(getTopRatedMoviesFuncs)\n    .then(function (responses) {\n        const combinedData = []\n        responses.map(res => {\n            if (res.data.results) {\n                combinedData.push(...res.data.results)\n            }\n            return null\n        })\n        return combinedData\n    })\n    .catch(handleError)\n}\n\nfunction getTopRatedMoviesFromOnePage(pageNumber) {\n    let url = BASE_URL + TOP_RATED_URL + API_KEY + `&page=${pageNumber}`\n    return axios.get(url)\n}","import * as movieApi from '../../api/movieApi'\nimport * as actionTypes from './actionTypes'\n\nexport function loadNowPlayingMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_NOW_PLAYING_MOVIE_SUCCESS, movies }\n}\n\nexport function loadRecommendedMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_RECOMMENDED_MOVIE_SUCCESS, movies }\n}\n\nexport function loadUpcomingMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_UPCOMING_MOVIE_SUCCESS, movies}\n}\n\nexport function loadPopularMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_POPULAR_MOVIE_SUCCESS, movies }\n}\n\nexport function loadTopRatedMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_TOP_RATED_MOVIE_SUCCESS, movies }\n}\n\nexport function loadNowPlayingMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getNowPlayingMovies()\n            .then(res => {\n                let nowPlayingList = []\n                let recommendedList = []\n\n                // get 5 movie for movie carousel \n                if (res.results < 0) return\n                if (res.results.length > 5) {\n                    for (let i = 0; i < 5; i++) {\n                        nowPlayingList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        nowPlayingList.push(movie)\n                    }\n                }\n\n                // get 20 movies for recomended movie list\n                if (res.results.length > 20) {\n                    for (let i = 0; i < 20; i++) {\n                        recommendedList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        recommendedList.push(movie)\n                    }\n                }\n\n                dispatch(loadNowPlayingMoviesSuccess(nowPlayingList))\n                dispatch(loadRecommendedMoviesSuccess(recommendedList))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n\nexport function loadUpcomingMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getUpcomingMovies()\n            .then(res => {\n                let upcomingList = [] \n                if (res.results < 0) return\n                if (res.results.length > 20) {\n                    for (let i = 0; i < 20; i++) {\n                        upcomingList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        upcomingList.push(movie)\n                    }\n                }\n\n                dispatch(loadUpcomingMoviesSuccess(upcomingList))\n            })\n    }\n}\n\nexport function loadPopularMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getPopularMovies()\n            .then(res => {\n                dispatch(loadPopularMoviesSuccess(res))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n\nexport function loadTopRatedMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getTopRatedMovies()\n            .then(res => {\n                dispatch(loadTopRatedMoviesSuccess(res))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n","import * as actionTypes from './actionTypes'\n\nexport function setHomepage(value) {\n    return { type: actionTypes.SET_HOME_PAGE, value }\n}","import React, { useState, useEffect } from 'react'\nimport { Carousel, CarouselItem, CarouselControl, CarouselIndicators, CarouselCaption } from 'reactstrap'\nimport { POSTER_BASE_URL } from '../../asset/GlobalData'\nimport { connect } from 'react-redux'\nimport '../../css/MovieCarousel.css'\n\nexport function MovieCarousel(props) {\n    const [activeIndex, setActiveIndex] = useState(0)\n    const [animating, setAnimating] = useState(false)\n    const [items, setItems] = useState([])\n\n    useEffect(() => {\n      if (props.nowPlaying) {\n        const newItems = []\n        props.nowPlaying.map(movie => {\n          // isImageDark(`${POSTER_BASE_URL}${movie.backdrop_path}`, index)\n          newItems.push({\n            src: `${POSTER_BASE_URL}${movie.backdrop_path}`,\n            altText: movie.original_title,\n            caption: movie.original_title,\n            overview: movie.overview,\n          })\n          return null\n        })\n        setItems(newItems)\n      }\n    }, [props.nowPlaying])\n\n    const next = () => {\n        if (animating) return\n        const nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1\n        setActiveIndex(nextIndex)\n    }\n\n    const previous = () => {\n        if (animating) return\n        const nextIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1\n        setActiveIndex(nextIndex)\n    }\n\n    const goToIndex = (newIndex) => {\n        if (animating) return\n        setActiveIndex(newIndex)\n    }\n\n    const slides = items.map((item) => {\n        return (\n          <CarouselItem\n            onExiting={() => setAnimating(true)}\n            onExited={() => setAnimating(false)}\n            key={item.src}\n          >\n            <img src={item.src} alt={item.altText} />\n            <CarouselCaption className={props.textColor} captionText={item.overview} captionHeader={item.caption} />\n          </CarouselItem>\n        )\n    })\n\n  //   const isImageDark = function(imageSrc, index) {\n  //     var img = document.createElement(\"img\")\n  //     img.src = imageSrc\n  //     img.setAttribute('crossOrigin', '')\n  //     img.style.display = \"none\"\n  //     document.body.appendChild(img)\n  \n  //     var fuzzy = 0.1\n\n  //     img.onload = function() {\n  //         var canvas = document.createElement(\"canvas\")\n  //         canvas.width = this.width\n  //         canvas.height = this.height\n  \n  //         var ctx = canvas.getContext(\"2d\")\n  //         ctx.drawImage(this,0,0)\n  \n  //         var imageData = ctx.getImageData(0,0,canvas.width,canvas.height)\n  //         var data = imageData.data\n  //         var r,g,b, max_rgb\n  //           var light = 0, dark = 0\n  \n  //         for(var x = 0, len = data.length; x < len; x+=4) {\n  //             r = data[x]\n  //             g = data[x+1]\n  //             b = data[x+2]\n  \n  //             max_rgb = Math.max(Math.max(r, g), b)\n  //             if (max_rgb < 128)\n  //                 dark++\n  //             else\n  //                 light++\n  //         }\n\n  //         var dl_diff = ((light - dark) / (this.width * this.height))\n  //         if (dl_diff + fuzzy < 0) { //dark image\n  //           const newTextColors = [...navbarTextColors, navbarTextColors[index] = 'light']\n  //         } else { //light image\n  //           const newTextColors = [...navbarTextColors, navbarTextColors[index] = 'dark']\n  //         }\n  //     }\n  // }\n\n  return (\n      <Carousel \n              activeIndex={activeIndex}\n              next={next}\n              previous={previous}\n          >\n\n          <CarouselIndicators items={items} activeIndex={activeIndex} onClickHandler={goToIndex} />\n              {slides}\n          <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous} />\n          <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next} />\n      </Carousel>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n      nowPlaying: state.movies.nowPlaying.length === 0 \n          ? [] \n          : state.movies.nowPlaying,\n  }\n}\n\nexport default connect(mapStateToProps)(MovieCarousel)","import React from 'react'\n\nexport default function SectionHeading(props) {\n    const styles = {\n        sectionTitle : {\n            color: '#fff'\n        }\n    }\n    return (\n        <div className=\"section-heading\">\n            <h2 className=\"section-title\" style={styles.sectionTitle} >{props.sectionTitle}</h2>\n        </div>\n    )\n}\n","import React from 'react'\nimport { TiInfoLarge, TiStar } from \"react-icons/ti\"\nimport { MOVIE_IMAGE_URL } from '../../asset/GlobalData'\nimport '../../css/MovieCard.css'\nimport { connect } from 'react-redux'\nimport { Link } from \"react-router-dom\"\n\nexport function MovieCard(props) {\n    const getGenreNamesFromIds = (genreIds) => {\n        let genreNames = []\n        props.genres.map(genre => {\n            for(let genreId of genreIds) {\n                if (genre.id === genreId) {\n                    genreNames.push(genre.name)\n                }\n            }\n            return null\n        })\n        genreNames = genreNames.join(', ')\n        return genreNames\n    }\n\n    return (\n        <div className=\"card-container\">\n            <div className=\"image-card\">\n                { props.redirect \n                    ?   <Link to={`/details/${props.movie.id}`}>\n                            <img className=\"movie-img\" src={MOVIE_IMAGE_URL + props.movie.poster_path} alt={props.movie.title}/>\n                        </Link>\n                    :   <Link to={props.changeId ? `${props.movie.id}` : `details/${props.movie.id}`} >\n                            <img className=\"movie-img\" src={MOVIE_IMAGE_URL + props.movie.poster_path} alt={props.movie.title}/>\n                        </Link>\n                }\n                \n                <div className=\"movie-info\">\n                    <TiInfoLarge color=\"#fff\" />\n                    <div className=\"info-text\">\n                        <h3 className=\"title\">{props.movie.title}</h3>\n                        <p className=\"overview\">{props.movie.overview}</p>\n                        <p className=\"genre\">{\"Genre: \" + getGenreNamesFromIds(props.movie.genre_ids)}</p>\n                        <p className=\"release-date\">{props.movie.release_date}</p>\n                        <p className=\"rate\">\n                            <TiStar color=\"yellow\" size={22} />\n                            {props.movie.vote_average}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres\n    }\n}\n\nexport default connect(mapStateToProps)(MovieCard)\n","import React from 'react'\nimport MovieCard from '../atoms/MovieCard'\n\nexport default function MovieList(props) {\n    const movieCards = props.movieList.map(movie => (\n        <MovieCard key={movie.id} movie={movie} redirect={props.redirect ? true : false}/>\n    ))\n\n    return (\n        <div className=\"movie-list\">\n            { movieCards }\n        </div>\n    )\n}\n","import React, { useState ,useEffect } from 'react'\nimport SectionHeading from '../atoms/SectionHeading'\nimport MovieList from '../molecules/MovieList'\nimport { Container } from 'reactstrap'\nimport { sectionNames } from '../../asset/GlobalData'\nimport { connect } from 'react-redux'\nimport '../../css/MovieSection.css'\n\nexport function MovieSection(props) {\n    const [title, setTitle] = useState(\"\")\n    const [movies, setMovies] = useState([])\n\n    useEffect(() => {\n        setTitle(props.sectionName)\n        switch(props.sectionName) {\n            case sectionNames.RECOMMENDED_MOVIES:\n                setMovies(props.recommended)\n            break\n\n            case sectionNames.UPCOMING_MOVIES:\n                setMovies(props.upcoming)\n                break\n\n            case sectionNames.TRENDING_MOVIES:\n                break\n\n            default:\n                break\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.recommended, props.upcoming ])\n\n    return (\n        <Container className=\"movie-section\">\n            <div>\n                <SectionHeading sectionTitle={title}/>\n            </div>\n            <div>\n                <MovieList movieList={movies} />\n            </div>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        recommended: state.movies.recommendedMovies,\n        upcoming: state.movies.upcomingMovies\n    }\n}\n  \nfunction mapDispatchToProps(dispatch) {\nreturn {\n    actions: {\n\n    }\n}\n}\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(MovieSection)","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport { sectionNames } from '../../asset/GlobalData'\nimport MovieCarousel from '../atoms/MovieCarousel'\nimport MovieSection from '../organisms/MovieSection'\nimport { Container, Row } from 'reactstrap'\nimport '../../css/Home.css'\n\nexport function Home(props) {\n    const styles = {\n        sectionContainer: {\n            'margin-top': '2rem'\n        }\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(true)\n        props.actions.loadNowPlayingMovies()\n        props.actions.loadUpcomingMovies()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <Container>\n            <Row>\n                <MovieCarousel />\n            </Row>\n            <Row style={styles.sectionContainer}>\n                <MovieSection sectionName={sectionNames.RECOMMENDED_MOVIES} />\n            </Row>\n            <Row style={styles.sectionContainer}>\n                <MovieSection sectionName={sectionNames.UPCOMING_MOVIES} />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        \n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadNowPlayingMovies: bindActionCreators(movieActions.loadNowPlayingMovies, dispatch),\n            loadUpcomingMovies: bindActionCreators(movieActions.loadUpcomingMovies, dispatch),\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React from 'react'\nimport { MOVIE_IMAGE_URL } from '../../asset/GlobalData'\n\nexport default function CastInfoCard({ name, url }) {\n    const styles = {\n        cardContainer: {\n            'maxWidth': '60px',\n            'marginRight': '1rem'\n        },\n        cardImage: {\n            'width': '100%',\n        },\n        cardText: {\n            'textAlign': 'center'\n        }\n    }\n    \n    return (\n        <div className=\"cast-info\" style={styles.cardContainer}>\n            <img src={MOVIE_IMAGE_URL + url}  alt=\"Not found\" style={styles.cardImage} />\n            <div className=\"cast-name\" style={styles.cardText} >{name}</div>\n        </div>\n    )\n}\n","import React from 'react'\nimport MovieCard from '../atoms/MovieCard'\nimport Swiper from 'react-id-swiper'\nimport 'swiper/swiper.scss'\n\nexport default function SwiperMovies({ movies }) {\n    const movieCards = movies.map(movie => (\n      <div key={movie.id}>\n          <MovieCard movie={movie} changeId={true} />\n      </div>\n    ))\n\n    const params = {\n          navigation: {\n          nextEl: '.swiper-button-next',\n          prevEl: '.swiper-button-prev'\n        },\n        pagination: {\n          el: '.swiper-pagination',\n          clickable: true,\n          dynamicBullets: true\n        },\n        spaceBetween: 100,\n        breakpoints: {\n          1350: {\n            slidesPerView: 4,\n            spaceBetween: 40\n          },\n          1000: {\n            slidesPerView: 3,\n            spaceBetween: 30\n          },\n          650: {\n            slidesPerView: 2,\n            spaceBetween: 20\n          },\n          300: {\n            slidesPerView: 1,\n            spaceBetween: 10\n          }\n        },\n        freeMode: true,\n    }\n\n    return (\n        <Swiper {...params} shouldSwiperUpdate >\n            { movieCards}\n        </Swiper>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport axios from 'axios'\nimport { BASE_URL, DETAILS_URL, API_KEY } from '../../asset/GlobalData'\nimport SwiperMovies from '../molecules/SwiperMovies'\n\nexport function RecommendedMovies(props) {\n    const [movies, setMovies] = useState([])\n    const [swiperCards, setSwiperCards] = useState(\"\")\n\n    const getRecommendedMovies = (movieId) => {\n        let url = BASE_URL + DETAILS_URL + movieId + \"/recommendations?api_key=\" + API_KEY\n        axios.get(url)\n            .then(response => {\n                if (response.status === 200) {\n                    return response.data\n                }\n                if (response.status === 400) {\n                  const error = response.text()\n                  throw new Error(error)\n                }\n                throw new Error(\"Network response was not ok.\")\n            })\n            .then(data => {\n                if (data.results.length > 10) {\n                    const recommendedList = data.results.slice(0, 10)\n                    setMovies(recommendedList)\n                } else {\n                    setMovies(data.results)\n                }\n            })\n    }\n\n    useEffect(() => {\n        if (props.movieId) {\n            getRecommendedMovies(props.movieId)\n        }\n    }, [props.movieId])\n\n    useEffect(() => {\n       if (movies.length > 0) {\n               const swiperCards = <SwiperMovies movies={movies} />\n               setSwiperCards(swiperCards)\n       }\n    }, [movies])\n\n    return (\n        <>\n            <h2>You may also like</h2>\n\n            <div> \n                {swiperCards}\n            </div>\n        </>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        nowPlaying: state.movies.nowPlaying.length === 0 \n            ? [] \n            : state.movies.nowPlaying,\n    }\n}\n  \nexport default connect(mapStateToProps)(RecommendedMovies)","import React, { useState ,useEffect } from 'react'\nimport { Col, Container, Row } from 'reactstrap'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport CastInfoCard from '../molecules/CastInfoCard'\nimport { BASE_URL, DETAILS_URL, API_KEY, MOVIE_IMAGE_URL, YOUTUBE_VIDEO_URL } from '../../asset/GlobalData'\nimport { TiStar } from 'react-icons/ti'\nimport { BsClock } from 'react-icons/bs'\nimport '../../css/MovieDetails.css'\nimport RecommendedMovies from '../organisms/RecommendedMovies'\n\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nexport function MovieDetails(props) {\n    const [movie, setMovie] = useState({})\n    const [genres, setGenres] = useState(\"\")\n    const [movieCredits, setMovieCredits] = useState({})\n    const [castInfoCards, setCastInfoCards] = useState([])\n    const [trailer, setTrailer] = useState({})\n\n    const styles = {\n        pageContainer: {\n            'paddingTop': '8rem',\n            'paddingBottom': '2rem'\n        }\n    }\n\n    const getDirectorName = () => {\n        if (movieCredits.crew) {\n            const director = movieCredits.crew.find(crewMember => crewMember.job === \"Director\")\n            if (director) return director.name\n            else return \"Not found\"\n        }\n    }\n\n    const getGenreNames = (genres) => {\n        let genreNames = []\n        if (genres) {\n            for(let movieGenre of genres) {\n                props.genres.map(genre => {\n                    if (movieGenre.id === genre.id) {\n                        genreNames.push(movieGenre.name)\n                    }\n                    return null\n                })\n            }\n            genreNames = genreNames.join(', ')\n        }\n        \n        return genreNames\n    }\n\n    const getMovieDetails = (movieId) => {\n        let url = BASE_URL + DETAILS_URL + movieId + \"?api_key=\" + API_KEY\n        axios.get(url)\n            .then(response => {\n                if (response.status === 200) {\n                    return response.data\n                }\n                if (response.status === 400) {\n                  const error = response.text()\n                  throw new Error(error)\n                }\n                throw new Error(\"Network response was not ok.\")\n            })\n            .then(data => setMovie(data))\n    }\n\n    const getMovieCredits = (movieId) => {\n        let url = BASE_URL + DETAILS_URL + movieId + \"/credits?api_key=\" + API_KEY\n        axios.get(url)\n            .then(response => {\n                if (response.status === 200) {\n                    return response.data\n                }\n                if (response.status === 400) {\n                  const error = response.text()\n                  throw new Error(error)\n                }\n                throw new Error(\"Network response was not ok.\")\n            })\n            .then(data => setMovieCredits(data))\n    }\n\n    const getTrailers = (movieId) => {\n        let url = BASE_URL + DETAILS_URL + movieId + \"/videos?api_key=\" + API_KEY\n        axios.get(url)\n            .then(response => {\n                if (response.status === 200) {\n                    return response.data\n                }\n                if (response.status === 400) {\n                  const error = response.text()\n                  throw new Error(error)\n                }\n                throw new Error(\"Network response was not ok.\")\n            })\n            .then(data => {\n                if (data.results.length === 0) {\n                    setTrailer({})\n                } \n                const officialTrailer = data.results.find(trailer => trailer.name === \"Official Trailer\")\n                if (officialTrailer) {\n                    setTrailer(officialTrailer)\n                } else {\n                    let availableTrailer = {}\n                    availableTrailer = data.results[0]\n                    setTrailer(availableTrailer)\n                }\n            })\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        const movieId = props.match.params.id\n        getMovieDetails(movieId)\n        getMovieCredits(movieId)\n        getTrailers(movieId)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.match.params.id])\n\n    useEffect(() => {\n        if (movie.genres) {\n            const genreNames = getGenreNames(movie.genres)\n            setGenres(genreNames)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [movie])\n\n    useEffect(() => {\n        if (movieCredits.cast) {\n            const castList = movieCredits.cast.slice(0, 5)\n            const castInfoCards = castList.map(cast => (\n                <CastInfoCard key={cast.credit_id} name={cast.name} url={cast.profile_path} />\n            ))\n            setCastInfoCards(castInfoCards)\n        }\n    }, [movieCredits])\n\n    return (\n        <Container id=\"movie-details\" style={styles.pageContainer}>\n            <Row className=\"movie-details-info\">\n                <Col sm=\"12\" xs=\"5\" md=\"5\" lg=\"4\" className=\"movie-poster\">\n                    <img className=\"movie-detail-img\" src={MOVIE_IMAGE_URL + movie.poster_path} alt={movie.title}/>\n                </Col>\n                <Col sm=\"12\" xs=\"6\" md=\"6\" lg=\"5\" className=\"detail-info-text\">\n                    <Row className=\"movie-detail-title\">\n                        <h2>{movie.title}</h2>\n                    </Row>\n                    <Row className=\"movie-detail-view\">\n                        <TiStar color=\"yellow\" /> \n                        {movie.vote_average}\n                        <div className=\"movie-duration\">\n                             <BsClock color=\"#fff\"/> {movie.runtime} min \n                        </div>\n                        {movie.vote_count} voted\n                    </Row>\n                    <Row className=\"movie-detail-overview\">{movie.overview}</Row>\n                    <Row className=\"movie-detail-release_date\">Release Date: {movie.release_date}</Row>\n                    <Row className=\"movie-detail-genre\">Genre: {genres} </Row>\n                    <Row className=\"movie-detail-director\">Director: {getDirectorName()}</Row>\n                    <Row className=\"cast-text\">Cast: </Row>\n                    <Row className=\"movie-detail-cast\">\n                        {castInfoCards}\n                    </Row>\n                </Col>\n            </Row>\n            <Row className=\"trailer\">\n                { trailer  && \n                    <Col sm=\"12\" xs=\"11\" md=\"12\" lg=\"9\" className=\"trailer-container\">\n                        <iframe src={trailer.key ? YOUTUBE_VIDEO_URL + trailer.key : null}  title={movie.title}/>\n                    </Col>\n                }\n            </Row>\n            <Row className=\"recommendation\">\n                <Col>\n                    <div className=\"recommmended movies\">\n                        <RecommendedMovies movieId={movie.id} />    \n                    </div> \n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch),\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieDetails)","import * as actionTypes from './actionTypes'\n\nexport function setFilterOptions(options) {\n    return { type: actionTypes.SET_FILTER_OPTION, options }\n}\n\nexport function clearFilter() {\n    return { type: actionTypes.CLEAR_FILTER }\n}\n\nexport function setGenre(genre) {\n    return { type: actionTypes.SET_GENRE, genre }\n}\n\nexport function setCountry(country) {\n    return { type: actionTypes.SET_COUNTRY, country }\n}","export const getLanguageCode = (countryName) => {\n    switch (countryName) {\n        case \"United States\":\n        case \"Canada\":\n        case \"United Kingdom\": \n            return \"en\"\n        case \"France\":\n            return \"fr\"\n        case \"Italy\":\n            return \"it\"\n        case \"Russia\":\n            return \"ru\"\n        case \"Korean\":\n            return \"ko\"\n        case \"Japan\":\n            return \"ja\"\n        case \"Hongkong\":\n        case \"China\":\n            return \"zh\"\n        case \"Brazil\":\n            return \"pt\"\n        case \"India\":\n            return \"hi\"\n        default:\n            return \"en\"\n    }\n}\n\nconst getYearStringFromDate = (dateString) => {\n    return dateString.substring(0, 4)\n}\n\nexport const getGenreIdsFromNames = (genreNames, allGenres) => {\n    let genreIds = []\n    if (genreNames.length === 0) return genreIds\n\n    allGenres.map(genre => {\n        for(let genreName of genreNames) {\n            if (genre.name === genreName) {\n                genreIds.push(genre.id)\n            }\n        }\n        return null\n    })\n    \n    return genreIds\n}\n\nexport const getLanguageCodesFromCountryNames = (countries) => {\n    const languageCodes = []\n    countries.map(country => {  \n        languageCodes.push(getLanguageCode(country))\n        return null\n    })\n    return languageCodes\n}\n\nexport const compareByDate = (a, b) => {\n    return new Date(a.release_date) > new Date(b.release_date)\n}\n\nexport const compareByName = (a, b) => {\n    return a.title.localeCompare(b.title)\n}\n\nexport const compareByRate = (a, b) => {\n    return a.vote_average === b.vote_average ? 0 : (a.vote_average > b.vote_average ? -1 : 1)\n}\n\nexport const compareByView = (a, b) => {\n    return a.popularity === b.popularity ? 0 : (a.popularity > b.popularity ? 1 : -1)\n}\n\nexport const filterGenre = (genreConditions, movie) => {\n    if (genreConditions.length === 0) return true   // no genre condition, return all movie \n    return genreConditions.every(condition => {    // movie must contains all the genres in the filter list\n        return movie.genre_ids.includes(condition)\n    })\n}\n\nexport const filterYear = (yearConditions, movie) => {\n    if (yearConditions.length === 0) return true    // no year condition, return all movie\n    if (!movie.release_date) return false   // some movies does not have release_date\n\n    return yearConditions.includes(getYearStringFromDate(movie.release_date))\n}\n\nexport const filterCountry = (countryConditions, movie) => {\n    if (countryConditions.length === 0) return true     // no country condition, return all movie\n    if (!movie.original_language)  return false // incase movie does not have original language\n    const languageCodes = getLanguageCodesFromCountryNames(countryConditions)\n    return languageCodes.includes(movie.original_language)\n}\n\nexport const sortMovies = (movies, sortType) => {\n    switch (sortType) {\n        case \"Default\":\n            return movies\n        case \"Release Date\":\n            return movies.sort(compareByDate)\n        case \"Name\":\n            return movies.sort(compareByName)\n        case \"Rate\": \n            return movies.sort(compareByRate)\n        case \"Most Watched\":\n            return movies.sort(compareByView)\n        default:\n            return movies\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as filterbarActions from '../../redux/actions/filterbarActions'\nimport { COUNTRIES, YEARS, SORT_OPTIONS } from '../../asset/GlobalData'\nimport { UncontrolledDropdown, DropdownToggle, Nav, DropdownMenu, NavItem, Button } from 'reactstrap'\nimport \"../../css/FilterBar.css\"\nimport { TiArrowUnsorted } from \"react-icons/ti\"\nimport { RiFilterOffFill } from \"react-icons/ri\"\nimport { AiOutlineGlobal, AiTwotoneCalendar, AiTwotoneFolderOpen } from \"react-icons/ai\"\n\nexport function FilterBar(props) {\n    const countries = COUNTRIES\n    const years = YEARS\n    const sorts = SORT_OPTIONS\n    const [countryDropdownItems, setCountryDropdownItems] = useState([])\n    const [yearDropdownItems, setYearDropdownItems] = useState([])\n    const [sortDropdownItems, setSortDropdownItems] = useState([])\n    const [genreDropdownItems, setGenreDropdownItems] = useState([])\n    const [genreCheckBoxsState, setGenreCheckBoxsState] = useState([])\n    const [yearCheckBoxsState, setYearCheckBoxsState] = useState([])\n    const [countryCheckBoxsState, setCountryCheckBoxsState] = useState([])\n    const [sortCheckBoxsState, setSortCheckBoxsState] = useState({sortType: 'Default'})\n    const [isClearingFilter, setIsClearingFilter] = useState(false)\n    const [genreValueText, setGenreValueText] = useState('All')\n    const [yearValueText, setYearValueText] = useState('All')\n    const [countryValueText, setCountryValueText] = useState('All')\n    const [sortValueText, setSortValueText] = useState('Default')\n    \n    const hanldeGenreCheckBoxsChange = (event) => {\n        const { name, checked } = event.target\n        setGenreCheckBoxsState(prevState => ({ ...prevState, [name]: checked }))\n    }\n\n    const hanldeYearCheckBoxsChange = (event) => {\n        const { name, checked } = event.target\n        setYearCheckBoxsState(prevState => ({ ...prevState, [name]: checked }))\n    }\n\n    const hanldeCountryCheckBoxsChange = (event) => {\n        const { name, checked } = event.target\n        setCountryCheckBoxsState(prevState => ({ ...prevState, [name]: checked }))\n    }\n\n    const hanldeSortCheckBoxsChange = (event) => {\n        const { value } = event.target\n        setSortCheckBoxsState(prevState => ({ ...prevState, \"sortType\": value }))\n    }\n\n    const getObjLength = (obj) => {\n        return Object.keys(obj).length\n    }\n\n    const getChecked = (obj) => {\n        const length = getObjLength(obj)\n        if (length === 0) return 0\n        return Object.values(obj).reduce((count, item) => count + (item === true ? 1 : 0), 0)\n    }\n\n    const getCheckedValue = (obj) => {\n        return Object.keys(obj).find(key => obj[key] === true)\n    }\n\n    const getCheckedArray = (obj) => {\n        let checkedArray = []\n        for (const [key, value] of Object.entries(obj)) {\n            if (value === true) checkedArray.push(key)\n        }\n        return checkedArray\n    }\n\n    const clearFilter = async() => {\n        setIsClearingFilter(true)\n        if (getObjLength(yearCheckBoxsState) > 0) {\n            let newYearState = unCheck(yearCheckBoxsState)\n            await setYearCheckBoxsState(newYearState)\n        }\n        \n        if (getObjLength(countryCheckBoxsState) > 0) {\n            let newCountryState = unCheck(countryCheckBoxsState)\n            await setCountryCheckBoxsState(newCountryState)\n        }\n        \n        if (getObjLength(genreCheckBoxsState) > 0) {\n            let newGenreState = unCheck(genreCheckBoxsState)\n            await setGenreCheckBoxsState(newGenreState)\n        }\n\n        await setSortCheckBoxsState({sortType: 'Default'})\n\n        // use await to make sure there is no useEffect change redux store\n        props.actions.clearFilter()\n        setIsClearingFilter(false)\n    }\n\n    const unCheck = (obj) => {\n        let newObj = {}\n        Object.keys(obj).map(key => {\n            return newObj = { ...newObj, [key]: false}\n        })\n\n        return newObj\n    }\n\n    useEffect(() => {\n        let countryItems = []\n        let yearItems = []\n        let sortItems = []\n\n        countries.map((country, index) => {\n            countryItems.push(\n                <div key={index} className=\"dropdown-item country-filter-item\">\n                    <input type=\"checkbox\" name={country} \n                        checked={countryCheckBoxsState[country]} \n                        onChange={hanldeCountryCheckBoxsChange} \n                    />\n                    {country}\n                </div>\n            )\n            return null\n        })\n\n        years.map((year, index) => {\n            yearItems.push(\n                <div key={index} className=\"dropdown-item year-filter-item\">\n                    <input type=\"checkbox\" name={year} \n                        checked={yearCheckBoxsState[year]} \n                        onChange={hanldeYearCheckBoxsChange} \n                    />\n                    {year}\n                </div>\n            )\n            return null\n        })\n\n        sorts.map((sort, index) => {\n            sortItems.push(\n                <div key={index} className=\"dropdown-item sort-filter-item\">\n                    <input type=\"radio\" name=\"sort\"\n                        checked={props.filterOptions.sort===sort}\n                        key={index}\n                        value={sort} \n                        onChange={hanldeSortCheckBoxsChange} \n                    />\n                    {sort}\n                </div>\n            )\n            return null\n        })\n\n        setCountryDropdownItems(countryItems)\n        setYearDropdownItems(yearItems)\n        setSortDropdownItems(sortItems)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        let yearItems = []\n        years.map((year, index) => {\n            yearItems.push(\n                <div key={index} className=\"dropdown-item year-filter-item\">\n                    <input type=\"checkbox\" name={year} \n                        checked={yearCheckBoxsState[year]} \n                        onChange={hanldeYearCheckBoxsChange} \n                    />\n                    {year}\n                </div>\n            )\n            setYearDropdownItems(yearItems)\n            return null\n        })\n\n        if (isClearingFilter) {\n            setYearValueText('All')\n            return \n        }\n\n        const yearsChecked = getChecked(yearCheckBoxsState)    \n        if (yearsChecked === 0) {\n            setYearValueText('All')\n        } else {\n            if (yearsChecked === 1) {\n                let year = getCheckedValue(yearCheckBoxsState)\n                setYearValueText(year)\n            } else {\n                setYearValueText(`${yearsChecked} selected`)\n            }\n        }\n\n        const checkedYears = getCheckedArray(yearCheckBoxsState)\n        props.actions.setFilterOptions({ ...props.filterOptions, years: checkedYears })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [yearCheckBoxsState])\n\n    useEffect(() => {\n        let countryItems = []\n        countries.map((country, index) => {\n            countryItems.push(\n                <div key={index} className=\"dropdown-item country-filter-item\">\n                    <input type=\"checkbox\" name={country} \n                        checked={countryCheckBoxsState[country]} \n                        onChange={hanldeCountryCheckBoxsChange} \n                    />\n                    {country}\n                </div>\n            )\n            setCountryDropdownItems(countryItems)\n            return null\n        })\n\n        if (isClearingFilter) {\n            setCountryValueText('All')\n            return\n        }\n\n        const countryChecked = getChecked(countryCheckBoxsState)    \n        if (countryChecked === 0) {\n            setCountryValueText('All')\n        } else {\n            if (countryChecked === 1) {\n                let year = getCheckedValue(countryCheckBoxsState)\n                setCountryValueText(year)\n            } else {\n                setCountryValueText(`${countryChecked} selected`)\n            }\n        }\n\n        const checkedCountries = getCheckedArray(countryCheckBoxsState)\n        props.actions.setFilterOptions({ ...props.filterOptions, countries: checkedCountries })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [countryCheckBoxsState])\n\n    useEffect(() => {\n        let sortItems = []\n        sorts.map((sort, index) => {\n            sortItems.push(\n                <div key={index} className=\"dropdown-item sort-filter-item\">\n                    <input type=\"radio\" name=\"sort\"\n                        key={index}\n                        checked={sortCheckBoxsState.sortType === sort}\n                        value={sort} \n                        onChange={hanldeSortCheckBoxsChange} \n                    />\n                    {sort}\n                </div>\n            )\n            setSortDropdownItems(sortItems)\n            return null\n        })\n\n        if (isClearingFilter) {\n            setSortValueText('Default')\n            return\n        }\n\n        const sortValue = sortCheckBoxsState.sortType\n        setSortValueText(sortValue)\n        props.actions.setFilterOptions({ ...props.filterOptions, sort: sortValue })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sortCheckBoxsState])\n\n    useEffect(() => {\n        if (props.genres.length > 0) {\n            let items = []\n            props.genres.map((genre, index) => {\n                items.push(\n                    <div key={index} className=\"dropdown-item genre-filter-item\">\n                        <input type=\"checkbox\" name={genre.name} \n                            checked={genreCheckBoxsState[genre.name]} \n                            onChange={hanldeGenreCheckBoxsChange} \n                        />\n                        {genre.name}\n                    </div>\n                )\n                return null\n            })\n            setGenreDropdownItems(items)\n        }\n\n        if (isClearingFilter) {\n            setGenreValueText('All')\n            return \n        }\n\n        const genresChecked = getChecked(genreCheckBoxsState)    \n        if (genresChecked === 0) {\n            setGenreValueText('All')\n        } else {\n            if (genresChecked === 1) {\n                let genre = getCheckedValue(genreCheckBoxsState)\n                setGenreValueText(genre)\n            } else {\n                setGenreValueText(`${genresChecked} selected`)\n            }\n        }\n\n        const checkedGenres = getCheckedArray(genreCheckBoxsState)\n        props.actions.setFilterOptions({ ...props.filterOptions, genres: checkedGenres })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.genres, genreCheckBoxsState])\n\n    return (\n        <div className=\"filter-bar-wrapper\">\n            <Nav>\n                <UncontrolledDropdown nav inNavbar>\n                    <DropdownToggle nav caret>\n                        <AiTwotoneFolderOpen /> \n                        Genre \n                        <div className=\"genre-value\">{genreValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                        { genreDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar className=\"year-filter\">\n                    <DropdownToggle nav caret>\n                        <AiTwotoneCalendar /> Year\n                        <div className=\"year-value\">{yearValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                        { yearDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar>\n                    <DropdownToggle nav caret>\n                        <AiOutlineGlobal /> Country\n                        <div className=\"country-value\">{countryValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                       { countryDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar className=\"sort-filter\">\n                    <DropdownToggle nav caret>\n                        <TiArrowUnsorted /> Sort\n                        <div className=\"sort-value\">{sortValueText}</div>\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                       { sortDropdownItems }\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <NavItem>\n                    <Button color=\"info\" className=\"clear-filter-button\" onClick={clearFilter} ><RiFilterOffFill />Clear Filter</Button>\n                </NavItem>\n            </Nav>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres.length === 0 ? [] : state.genres,\n        filterOptions: state.filterbar\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            setFilterOptions: bindActionCreators(filterbarActions.setFilterOptions, dispatch),\n            clearFilter: bindActionCreators(filterbarActions.clearFilter, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterBar)","import React, { useState, useEffect } from \"react\"\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\"\nimport '../../css/PaginationBar.css'\n\nexport default function PaginationBar({ moviesPerPage, totalMovies, currentPage, paginate, link }) {\n    const [pageNumbers, setPageNumbers] = useState(0)\n    const [paginationItems, setPaginationItems] = useState([])\n    const [activePage, setActivePage] = useState(currentPage)\n\n    const firstPageClick = () => {\n        paginate(1)\n        setActivePage(1)\n    }\n\n    const prePageClick = () => {\n        if (currentPage > 1) {\n            paginate(currentPage - 1)\n            setActivePage(currentPage - 1)\n        }\n    }\n\n    const nextPageClick = () => {\n        if (currentPage < pageNumbers.length) {\n            paginate(currentPage + 1)\n            setActivePage(currentPage + 1)\n        }\n    }\n\n    const lastPageClick = () => {\n        const lastIndex = pageNumbers.length\n        paginate(lastIndex)\n        setActivePage(lastIndex)\n    }\n\n    const pageClick = (number) => {\n        paginate(number)\n        setActivePage(number)\n    }\n\n    useEffect(() => {\n        setActivePage(currentPage)\n    }, [currentPage])\n\n    useEffect(() => {\n        let pageNum = []\n        for (let i = 1; i <= Math.ceil(totalMovies / moviesPerPage); i++) {\n            pageNum.push(i)\n        }\n        setPageNumbers(pageNum)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [totalMovies])\n\n    useEffect(() => {\n        if (pageNumbers.length > 0) {\n            const items = pageNumbers.map(number => (\n                <PaginationItem key={number} className={activePage === number ? 'active-page' : ''}>\n                    <PaginationLink href={link} onClick={()=> pageClick(number)}>{number}</PaginationLink>\n                </PaginationItem>\n            ))\n            setPaginationItems(items)\n        } else {\n            setPaginationItems([])\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [pageNumbers, activePage])\n\n    return (\n        <Pagination aria-label=\"Page navigation example\">\n            <PaginationItem>\n                <PaginationLink first href={link} onClick={firstPageClick} />\n            </PaginationItem>\n            <PaginationItem>\n                <PaginationLink previous href={link} onClick={prePageClick} />\n            </PaginationItem>\n                {paginationItems}\n            <PaginationItem>\n                <PaginationLink next href={link} onClick={nextPageClick} />\n            </PaginationItem>\n            <PaginationItem>\n                <PaginationLink last href={link} onClick={lastPageClick} />\n            </PaginationItem>\n        </Pagination>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Container, Row } from 'reactstrap'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport * as filterbarActions from '../../redux/actions/filterbarActions'\nimport * as filterFunctions from '../../asset/FilterFunctions'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\n\nexport function TopRatedMovies(props) {\n    const [movies, setMovies] = useState([])\n    const [filteredMovies, setFilteredMovies] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const moviesPerPage = 40\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = filteredMovies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        pageContainer: {\n            'paddingTop': '8rem'\n        },\n        pageTitle: {\n            'margin': '0rem 1rem 2rem 1rem'\n        },\n        topRatedMovieContainer: {\n            'margin': '0 1rem',\n            'width': '100%'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    const filterMovies = () => {\n        if (movies.length > 0) {\n            let filteredMovieList = movies\n            let sortType = \"Default\"\n            if (props.filterOptions.sort) {\n                sortType = props.filterOptions.sort\n            }\n\n            if (props.filterOptions.genres.length > 0) {\n                const genreIds = filterFunctions.getGenreIdsFromNames(props.filterOptions.genres, props.genres)\n                filteredMovieList = filteredMovieList.filter(filterFunctions.filterGenre.bind(this, genreIds))\n            }\n\n            if (props.filterOptions.years.length > 0) {\n                filteredMovieList = filteredMovieList.filter(filterFunctions.filterYear.bind(this, props.filterOptions.years))\n            }\n\n            if (props.filterOptions.countries.length > 0) {\n                filteredMovieList = filteredMovieList.filter(filterFunctions.filterCountry.bind(this, props.filterOptions.countries))\n            }\n\n            filteredMovieList = filterFunctions.sortMovies(filteredMovieList, sortType)\n            setFilteredMovies(filteredMovieList)\n        }\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        if (movies.length === 0) {\n            props.actions.loadTopRatedMovies()\n        }\n        props.actions.clearFilter()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    useEffect(() => {\n        setMovies(props.topRatedMovies)\n        setFilteredMovies(props.topRatedMovies)\n    }, [props.topRatedMovies])\n\n    useEffect(() => {\n        filterMovies()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.filterOptions])\n\n    return (\n        <Container id=\"top-rated-movies\" style={styles.pageContainer}>\n            <Row className=\"page-title\">\n                <h2 style={styles.pageTitle}>\n                    Top rated movies\n                </h2>\n            </Row>\n            <Row className=\"filter-bar\">\n                <FilterBar />\n            </Row>\n            <Row className=\"top-rated-movies\">\n                <div className=\"top-rated-movie-list\" style={styles.topRatedMovieContainer}>\n                    <MovieList movieList={currentMovies} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                {\n                    filteredMovies.length > 0 &&\n                    <PaginationBar moviesPerPage={moviesPerPage} totalMovies={filteredMovies.length} \n                    currentPage={currentPage} paginate={paginate} link=\"#top-rated-movies\" />\n                }\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        topRatedMovies: state.movies.topRatedMovies.length === 0 \n            ? [] \n            : state.movies.topRatedMovies,\n        filterOptions: state.filterbar,\n        genres: state.genres\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadTopRatedMovies: bindActionCreators(movieActions.loadTopRatedMovies, dispatch),\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch),\n            clearFilter: bindActionCreators(filterbarActions.clearFilter, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopRatedMovies)","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport * as filterbarActions from '../../redux/actions/filterbarActions'\nimport * as filterFunctions from '../../asset/FilterFunctions'\nimport { Container, Row } from 'reactstrap'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\n\nexport function PopularMovies(props) {\n    const [movies, setMovies] = useState([])\n    const [filteredMovies, setFilteredMovies] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const moviesPerPage = 40\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = filteredMovies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        pageContainer: {\n            'paddingTop': '8rem'\n        },\n        pageTitle: {\n            'margin': '0rem 1rem 2rem 1rem'\n        },\n        popularMovieContainer: {\n            'margin': '0 1rem',\n            'width': '100%'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        if (movies.length === 0) {\n            props.actions.loadPopularMovies()\n        }\n        props.actions.clearFilter()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    useEffect(() => {\n        setMovies(props.popularMovies)\n        setFilteredMovies(props.popularMovies)\n    }, [props.popularMovies])\n\n    useEffect(() => {\n        if (movies.length > 0) {\n            let sortType = \"Default\"\n            if (props.filterOptions.sort) {\n                sortType = props.filterOptions.sort\n            }\n\n            const genreIds = filterFunctions.getGenreIdsFromNames(props.filterOptions.genres, props.genres)\n            let filteredMovieList = \n                movies\n                    .filter(filterFunctions.filterGenre.bind(this, genreIds))\n                    .filter(filterFunctions.filterYear.bind(this, props.filterOptions.years))\n                    .filter(filterFunctions.filterCountry.bind(this, props.filterOptions.countries))\n\n            filteredMovieList = filterFunctions.sortMovies(filteredMovieList, sortType)\n            setFilteredMovies(filteredMovieList)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.filterOptions])\n\n    return (\n        <Container id=\"popular-movies\" style={styles.pageContainer}>\n            <Row className=\"page-title\">\n                <h2 style={styles.pageTitle}>\n                    Popular movies\n                </h2>\n            </Row>\n            <Row className=\"filter-bar\">\n                <FilterBar />\n            </Row>\n            <Row className=\"popular-movies\">\n                <div className=\"popular-movie-list\" style={styles.popularMovieContainer}>\n                    <MovieList movieList={currentMovies} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                {\n                    filteredMovies.length > 0 && \n                    <PaginationBar moviesPerPage={moviesPerPage} totalMovies={filteredMovies.length} \n                    currentPage={currentPage} paginate={paginate} link=\"#popular-movies\" />\n                }\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        popularMovies: state.movies.popularMovies.length === 0 \n            ? [] \n            : state.movies.popularMovies,\n        filterOptions: state.filterbar,\n        genres: state.genres\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadPopularMovies: bindActionCreators(movieActions.loadPopularMovies, dispatch),\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch),\n            clearFilter: bindActionCreators(filterbarActions.clearFilter, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PopularMovies)","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Container, Row } from 'reactstrap'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport * as filterFunctions from '../../asset/FilterFunctions'\nimport * as filterbarActions from '../../redux/actions/filterbarActions'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\nimport axios from 'axios'\nimport { BASE_URL, SEARCH_URL, API_KEY } from '../../asset/GlobalData'\n\nexport function SearchPage(props) {\n    const [movies, setMovies] = useState([])\n    const [filteredMovies, setFilteredMovies] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const [searchString, setSearchString] = useState(\"\")\n    const moviesPerPage = 40\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = filteredMovies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        pageContainer: {\n            'paddingTop': '8rem'\n        },\n        searchMovieContainer: {\n            'margin': '0 1rem',\n            'width': '100%'\n        },\n        searchTitle: {\n            'margin': '0rem 1rem 2rem 1rem'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    const getSearchMovies = (searchString) => {\n        const getSearchMoviesFuncs = []\n        for (let i = 1; i <= 20; i++) {\n            getSearchMoviesFuncs.push(getSearchMoviesFromOnePage(i, searchString))\n        }\n\n        Promise.all(getSearchMoviesFuncs)\n            .then(function (responses) {\n                const combinedData = []\n                responses.map(res => {\n                    if (res.data.results) {\n                        combinedData.push(...res.data.results)\n                    }\n                    return null\n                })\n                setMovies(combinedData)\n                setFilteredMovies(combinedData)\n            })\n            .catch(error => {\n                console.error(\"API call failed. \" + error)\n                throw error\n            }) \n    }\n\n    const getSearchMoviesFromOnePage = (pageNumber, searchString) => {\n        let url = BASE_URL + SEARCH_URL + API_KEY + `&query=${searchString}&page=${pageNumber}`\n        return axios.get(url)\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        if (props.location.state) {\n            let searchQuery = props.location.state.searchString\n            setSearchString(searchQuery)\n            getSearchMovies(searchQuery)\n            if (movies.length === 0) {\n                getSearchMovies(searchQuery)\n            }\n        }\n        props.actions.clearFilter()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (props.location.state) {\n            let searchQuery = props.location.state.searchString\n            if (searchQuery !== searchString) {\n                setSearchString(searchQuery)\n                getSearchMovies(searchQuery)\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.location.state])\n\n    useEffect(() => {\n        if (movies.length > 0) {\n            let sortType = \"Default\"\n            if (props.filterOptions.sort) {\n                sortType = props.filterOptions.sort\n            }\n\n            const genreIds = filterFunctions.getGenreIdsFromNames(props.filterOptions.genres, props.genres)\n            let filteredMovieList = \n                movies\n                    .filter(filterFunctions.filterGenre.bind(this, genreIds))\n                    .filter(filterFunctions.filterYear.bind(this, props.filterOptions.years))\n                    .filter(filterFunctions.filterCountry.bind(this, props.filterOptions.countries))\n\n            filteredMovieList = filterFunctions.sortMovies(filteredMovieList, sortType)\n            setFilteredMovies(filteredMovieList)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.filterOptions])\n\n    return (\n        <Container id=\"search-movies\" style={styles.pageContainer}>\n            <Row className=\"search-title\">\n                <h2 style={styles.searchTitle}>\n                    {`Results for: ${searchString}`}\n                </h2>\n            </Row>\n            <Row className=\"filter-bar\">\n                <FilterBar/>\n            </Row>\n            <Row className=\"search-movies\">\n                <div className=\"search-movie-list\" style={styles.searchMovieContainer}>\n                    <MovieList movieList={currentMovies} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                {filteredMovies.length > 0 && \n                    (\n                        <PaginationBar moviesPerPage={moviesPerPage} totalMovies={filteredMovies.length} \n                            currentPage={currentPage} paginate={paginate} link=\"#search-movies\" />\n                    )\n                }\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        filterOptions: state.filterbar,\n        genres: state.genres\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch),\n            clearFilter: bindActionCreators(filterbarActions.clearFilter, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage)\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Container, Row } from 'reactstrap'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport * as filterbarActions from '../../redux/actions/filterbarActions'\nimport * as filterFunctions from '../../asset/FilterFunctions'\nimport { BASE_URL, DISCOVER_URL, API_KEY } from '../../asset/GlobalData'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\nimport axios from 'axios'\n\nexport function MoviesByGenre(props) {\n    const [movies, setMovies] = useState([])\n    const [filteredMovies, setFilteredMovies] = useState([])\n\n    const [currentPage, setCurrentPage] = useState(1)\n    const moviesPerPage = 40\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = filteredMovies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        pageContainer: {\n            'paddingTop': '8rem'\n        },\n        pageTitle: {\n            'margin': '0rem 1rem 2rem 1rem'\n        },\n        genreMovieContainer: {\n            'margin': '0 1rem',\n            'width': '100%'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    const getMoviesByGenre = (genre) => {\n        if (!genre) return \n        \n        const getMoviesFuncs = []\n        for (let i = 1; i <= 20; i++) {\n            getMoviesFuncs.push(getMoviesByGenreFromOnePage(i, genre.id))\n        }\n\n        Promise.all(getMoviesFuncs)\n            .then(function (responses) {\n                const combinedData = []\n                responses.map(res => {\n                    if (res.data.results) {\n                        combinedData.push(...res.data.results)\n                    }\n                    return null\n                })\n                setMovies(combinedData)\n                setFilteredMovies(combinedData)\n            })\n            .catch(error => {\n                console.error(\"API call failed. \" + error)\n                throw error\n            }) \n    }\n\n    const getMoviesByGenreFromOnePage = (pageNumber, genreId) => {\n        let url = BASE_URL + DISCOVER_URL + API_KEY + \"&page=\" + pageNumber + \"&with_genres=\" + genreId\n        return axios.get(url)\n    }\n\n    useEffect(() => {\n        props.actions.setHomePage(false)\n        const genreName = props.match.params.name\n        const genre = props.genres.find(g => g.name === genreName)\n        getMoviesByGenre(genre)\n        props.actions.setGenre(genre)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (props.match.params.name) {\n            const genreName = props.match.params.name\n            const genre = props.genres.find(g => g.name === genreName)\n            getMoviesByGenre(genre)\n            props.actions.setGenre(genre)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.match.params.name])\n\n    useEffect(() => {\n        if (movies.length > 0) {\n            let sortType = \"Default\"\n            if (props.filterOptions.sort) {\n                sortType = props.filterOptions.sort\n            }\n\n            const genreIds = filterFunctions.getGenreIdsFromNames(props.filterOptions.genres, props.genres)\n            let filteredMovieList = \n                movies\n                    .filter(filterFunctions.filterGenre.bind(this, genreIds))\n                    .filter(filterFunctions.filterYear.bind(this, props.filterOptions.years))\n                    .filter(filterFunctions.filterCountry.bind(this, props.filterOptions.countries))\n\n            filteredMovieList = filterFunctions.sortMovies(filteredMovieList, sortType)\n            setFilteredMovies(filteredMovieList)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.filterOptions])\n\n    return (\n        <Container id=\"movies-by-genre\" style={styles.pageContainer}>\n            <Row className=\"page-title\">\n                <h2 style={styles.pageTitle}>\n                    {props.match.params.name} Movies\n                </h2>\n            </Row>\n            <Row className=\"filter-bar\">\n                <FilterBar />\n            </Row>\n            <Row className=\"movies-by-genre\">\n                <div className=\"movie-list-by-genre\" style={styles.genreMovieContainer}>\n                    <MovieList movieList={currentMovies} redirect={true} />\n                </div>\n            </Row>\n            <Row className=\"pagination-bar\" style={styles.paginationBar}>\n                {\n                    filteredMovies.length > 0 &&\n                    <PaginationBar moviesPerPage={moviesPerPage} totalMovies={filteredMovies.length} \n                    currentPage={currentPage} paginate={paginate} link=\"#movies-by-genre\" />\n                }\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        filterOptions: state.filterbar,\n        genres: state.genres\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch),\n            clearFilter: bindActionCreators(filterbarActions.clearFilter, dispatch),\n            setGenre: bindActionCreators(filterbarActions.setGenre, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesByGenre)\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Container, Row } from 'reactstrap'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport * as filterbarActions from '../../redux/actions/filterbarActions'\nimport * as filterFunctions from '../../asset/FilterFunctions'\nimport { BASE_URL, DISCOVER_URL, API_KEY } from '../../asset/GlobalData'\nimport MovieList from '../molecules/MovieList'\nimport FilterBar from '../molecules/FilterBar'\nimport PaginationBar from '../molecules/PaginationBar'\nimport axios from 'axios'\n\nexport function MoviesByCountry(props) {\n    const [movies, setMovies] = useState([])\n    const [filteredMovies, setFilteredMovies] = useState([])\n\n    const [currentPage, setCurrentPage] = useState(1)\n    const moviesPerPage = 40\n    const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n    const indexOfLastMovie = currentPage * moviesPerPage\n    const indexOfFirstMovie = indexOfLastMovie - moviesPerPage\n    const currentMovies = filteredMovies.slice(indexOfFirstMovie, indexOfLastMovie)\n\n    const styles = {\n        pageContainer: {\n            'paddingTop': '8rem'\n        },\n        pageTitle: {\n            'margin': '0rem 1rem 2rem 1rem'\n        },\n        countryMovieContainer: {\n            'margin': '0 1rem',\n            'width': '100%'\n        },\n        paginationBar: {\n            'justifyContent': 'center',\n            'alignItems': 'center'\n        }\n    }\n\n    const getMoviesByCountry = (languageCode) => {\n        if (!languageCode) return \n        \n        const getMoviesFuncs = []\n        for (let i = 1; i <= 20; i++) {\n            getMoviesFuncs.push(getMoviesByCountryFromOnePage(i, languageCode))\n        }\n\n        Promise.all(getMoviesFuncs)\n            .then(function (responses) {\n                const combinedData = []\n                responses.map(res => {\n                    if (res.data.results) {\n                        combinedData.push(...res.data.results)\n                    }\n                    return null\n                })\n                setMovies(combinedData)\n                setFilteredMovies(combinedData)\n            })\n            .catch(error => {\n                console.error(\"API call failed. \" + error)\n                throw error\n            }) \n    }\n\n    const getMoviesByCountryFromOnePage = (pageNumber, languageCode) => {\n        let url = BASE_URL + DISCOVER_URL + API_KEY + \"&page=\" + pageNumber + \"&with_original_language=\" + languageCode\n        return axios.get(url)\n    }\n\n    useEffect(() => {\n        if (props.match.params.name) {\n            const countryName = props.match.params.name\n            const languageCode = filterFunctions.getLanguageCode(countryName)\n            getMoviesByCountry(languageCode)\n            props.actions.setCountry(countryName)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.match.params.name])\n\n    useEffect(() => {\n        if (movies.length > 0) {\n            let sortType = \"Default\"\n            if (props.filterOptions.sort) {\n                sortType = props.filterOptions.sort\n            }\n\n            const genreIds = filterFunctions.getGenreIdsFromNames(props.filterOptions.genres, props.genres)\n            let filteredMovieList = \n                movies\n                    .filter(filterFunctions.filterGenre.bind(this, genreIds))\n                    .filter(filterFunctions.filterYear.bind(this, props.filterOptions.years))\n                    .filter(filterFunctions.filterCountry.bind(this, props.filterOptions.countries))\n\n            filteredMovieList = filterFunctions.sortMovies(filteredMovieList, sortType)\n            setFilteredMovies(filteredMovieList)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.filterOptions])\n\n    return (\n        <Container id=\"movies-by-country\" style={styles.pageContainer}>\n        <Row className=\"page-title\">\n            <h2 style={styles.pageTitle}>\n                {props.match.params.name} Movies\n            </h2>\n        </Row>\n        <Row className=\"filter-bar\">\n            <FilterBar />\n        </Row>\n        <Row className=\"movies-by-country\">\n            <div className=\"movie-list-by-country\" style={styles.countryMovieContainer}>\n                <MovieList movieList={currentMovies} redirect={true} />\n            </div>\n        </Row>\n        <Row className=\"pagination-bar\" style={styles.paginationBar}>\n            {\n                filteredMovies.length > 0 &&\n                <PaginationBar moviesPerPage={moviesPerPage} totalMovies={filteredMovies.length} \n                currentPage={currentPage} paginate={paginate} link=\"#movies-by-country\" />\n            }\n        </Row>\n    </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        filterOptions: state.filterbar,\n        genres: state.genres\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            setHomePage: bindActionCreators(navbarActions.setHomepage, dispatch),\n            clearFilter: bindActionCreators(filterbarActions.clearFilter, dispatch),\n            setCountry: bindActionCreators(filterbarActions.setCountry, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesByCountry)\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport './css/App.css'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Navbar from './components/commons/NavBar'\nimport Home from './components/pages/Home'\nimport MovieDetails from './components/pages/MovieDetails'\nimport TopRatedMovies from './components/pages/TopRatedMovies'\nimport PopularMovies from './components/pages/PopularMovies'\nimport SearchPage from './components/pages/SearchPage'\nimport MoviesByGenre from './components/pages/MoviesByGenre'\nimport MoviesByCountry from './components/pages/MoviesByCountry'\n\n// axios.defaults.baseURL = 'https://...'\nfunction App(props) {\n  const [showNav, setShowNav] = useState(true)\n  const [transparentNav, setTransparentNav] = useState(true)\n  const [scrolledPosition, setSrolledPosition] = useState(0)\n  const [carouselHeight, setCarouselHeight] = useState(0)\n\n  const handleScroll = () => {\n    if (!props.homepage) {\n      setTransparentNav(false)\n      setShowNav(true)\n      return\n    }\n\n    const currentPosition = window.pageYOffset\n\n    if (carouselHeight <= 0 ) {\n      if (document.querySelector('.carousel')) {\n        const height = document.querySelector('.carousel').clientHeight\n        setCarouselHeight(height)\n      }\n    }\n\n    // show/hide navbar when scroll\n    if (scrolledPosition > currentPosition) {\n      setShowNav(true)\n    } else {\n      setShowNav(false)\n    }\n\n    // make change navbar background when carousel is not in view port\n    if (currentPosition > carouselHeight) {\n      setTransparentNav(false)\n    } else {\n      setTransparentNav(true)\n    }\n\n    setSrolledPosition(currentPosition)\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll)\n    }\n  })\n\n  useEffect(() => {\n    if (props.homepage) {\n      const currentPosition = window.pageYOffset\n      if(currentPosition === 0) {\n        setTransparentNav(true)\n      } else {\n        setTransparentNav(false)\n      }\n    } else {\n      setTransparentNav(false)\n    }\n  }, [props.homepage])\n\n  return (\n    <Router basename=\"/movie-discovery\">\n      <div className=\"App\">\n        <Navbar showNav={showNav} isTransparent={transparentNav} />\n        <Switch>\n          <Route path=\"/popular\" component={PopularMovies} />\n          <Route path=\"/toprated\" component={TopRatedMovies} />\n          <Route path=\"/details/:id\" component={MovieDetails} />\n          <Route path=\"/movies/genre/:name\" component={MoviesByGenre} />\n          <Route path=\"/movies/country/:name\" component={MoviesByCountry} />\n          <Route path='/search' component={SearchPage} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n      homepage: state.navbar.homepage\n  }\n}\n\nexport default connect(mapStateToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    nowPlaying: [],\n    searchMovies: [],\n    recommendedMovies: [],\n    upcomingMovies: [],\n    topRatedMovies: [],\n    popularMovies: [],\n}\n\nexport default function movieReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.LOAD_NOW_PLAYING_MOVIE_SUCCESS: \n            return { ...state, nowPlaying: action.movies }\n        case actionTypes.LOAD_RECOMMENDED_MOVIE_SUCCESS:\n            return { ...state, recommendedMovies: action.movies }\n        case actionTypes.LOAD_UPCOMING_MOVIE_SUCCESS:\n            return { ...state, upcomingMovies: action.movies }\n        case actionTypes.LOAD_POPULAR_MOVIE_SUCCESS:\n            return { ...state, popularMovies: action.movies }\n        case actionTypes.LOAD_TOP_RATED_MOVIE_SUCCESS:\n            return { ...state, topRatedMovies: action.movies }\n        case actionTypes.LOAD_LATEST_MOVIES:\n            return { ...state, latestMovies: action.latestMovies }\n        case actionTypes.LOAD_TRENDING_MOVIES:\n            return { ...state, trendingMovies: action.trendingMovies }\n        default:\n            return state\n    }\n}","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    homepage: true\n}\n\nexport default function navbarReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.SET_HOME_PAGE:\n            return { ...state, homepage: action.value }\n        default:\n            return state\n    }\n}","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    genres: [],\n    years: [],\n    countries: [],\n    sort: 'Default'\n}\n\nexport default function filterbarReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.SET_FILTER_OPTION:\n            return action.options\n        case actionTypes.CLEAR_FILTER:\n            return initialState\n        case actionTypes.SET_GENRE:\n            return { ...initialState, genres: [action.genre] }\n        case actionTypes.SET_COUNTRY:\n            return { ...initialState, countries: [action.country] }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport genres from './genreReducer'\nimport movies from './movieReducer'\nimport navbar from './navbarReducer'\nimport filterbar from './filterbarReducer'\n\nconst rootReducer = combineReducers({\n    genres,\n    movies,\n    navbar,\n    filterbar\n})\n\nexport default rootReducer","import * as actionTypes from '../actions/actionTypes'\n\nexport default function genreReducer(state = [], action) {\n    switch(action.type) {\n        case actionTypes.LOAD_GENRES_SUCCESS: \n            return action.genres\n        default:\n            return state\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './redux/configureStore'\nimport { Provider as ReduxProvider } from 'react-redux'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ReduxProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, compose } from 'redux'\nimport rootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport { applyMiddleware } from 'redux'\n\nexport default function configureStore(initialState) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n    return createStore(\n        rootReducer,\n        initialState,\n        composeEnhancers(applyMiddleware(thunk))\n    )\n} "],"sourceRoot":""}
{"version":3,"sources":["components/atoms/InputSearch.js","api/apiUtils.js","asset/GlobalData.js","redux/actions/genreActions.js","api/genreApi.js","redux/actions/actionTypes.js","components/commons/NavBar.js","redux/actions/movieActions.js","api/movieApi.js","redux/actions/navbarActions.js","components/atoms/MovieCarousel.js","components/atoms/SectionHeading.js","components/atoms/MovieCard.js","components/molecules/MovieList.js","components/organisms/MovieSection.js","components/pages/Home.js","components/pages/MovieDetails.js","components/pages/LatestMovies.js","components/pages/TrendingMovies.js","App.js","serviceWorker.js","redux/reducers/movieReducer.js","redux/reducers/navbarReducer.js","redux/reducers/index.js","redux/reducers/genreReducer.js","index.js","redux/configureStore.js"],"names":["InputSearch","className","onSubmit","e","preventDefault","alert","type","placeholder","handleResponse","response","a","status","data","text","error","Error","handleError","console","sectionNames","COUNTRIES","loadGenres","dispatch","axios","get","BASE_URL","then","catch","res","genres","connect","state","length","textColor","navbar","actions","bindActionCreators","genreActions","props","useState","genreDropdownItems","setGenreDropdownItems","countryDropdownItems","setCountryDropdownItems","countries","showNav","show","setShow","isTransparent","setIsTransparent","isOpen","setIsOpen","useEffect","items","map","country","index","push","DropdownItem","key","genre","name","Navbar","fixed","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","NavItem","NavLink","loadNowPlayingMovies","nowPlayingList","recommendedList","results","i","movie","movies","loadRecommendedMoviesSuccess","setTextColor","color","nowPlaying","navbarActions","activeIndex","setActiveIndex","animating","setAnimating","setItems","navbarTextColors","newItems","isImageDark","backdrop_path","src","altText","original_title","caption","overview","next","nextIndex","previous","slides","item","CarouselItem","onExiting","onExited","alt","CarouselCaption","captionText","captionHeader","imageSrc","img","document","createElement","setAttribute","style","display","body","appendChild","onload","canvas","width","this","height","ctx","getContext","drawImage","r","g","b","getImageData","light","dark","x","len","Math","max","Carousel","CarouselIndicators","onClickHandler","newIndex","CarouselControl","direction","directionText","SectionHeading","sectionTitle","poster_path","title","genreIds","genreNames","genreId","id","join","getGenreNamesFromIds","genre_ids","release_date","size","vote_average","MovieList","movieCards","movieList","recommended","recommendedMovies","setTitle","setMovies","sectionName","Container","movieActions","Row","MovieDetails","LatestMovies","TrendingMovies","App","setShowNav","transparentNav","setTransparentNav","scrolledPosition","setSrolledPosition","carouselHeight","setCarouselHeight","handleScroll","currentPosition","window","pageYOffset","querySelector","clientHeight","addEventListener","removeEventListener","path","component","Home","Boolean","location","hostname","match","initialState","searchMovies","latestMovies","trendingMovies","rootReducer","combineReducers","action","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","configureStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4ef88189.chunk.js","sourcesContent":["import React from 'react'\nimport { MdSearch } from \"react-icons/md\"\nimport '../../css/InputSearch.css'\n\nexport default function InputSearch() {\n    const search = (e) => {\n        e.preventDefault()\n        alert(\"Searching...\")\n    }\n\n    return (\n        <form className=\"search-box\" onSubmit={search}>\n            <input type=\"text\" className=\"input\" placeholder=\"Movie name...\"  />\n            <button type=\"submit\" className=\"search-button\">\n                <MdSearch />\n            </button>\n        </form>\n    )\n}\n","export async function handleResponse(response) {\n    if (response.status === 200) {\n        return response.data\n    }\n    if (response.status === 400) {\n      const error = await response.text()\n      throw new Error(error)\n    }\n    throw new Error(\"Network response was not ok.\")\n  }\n  \n  export function handleError(error) {\n    console.error(\"API call failed. \" + error)\n    throw error\n  }\n  ","export const API_KEY = \"323c169d6502f84d4a8a225e5732db2c\"\nexport const BASE_URL = \"https://api.themoviedb.org/3/\"\nexport const GENRE_URL = 'genre/movie/list?api_key='\nexport const NOW_PLAYING_URL = 'movie/now_playing?api_key='\nexport const POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w1280'\nexport const MOVIE_IMAGE_URL = 'https://image.tmdb.org/t/p/w500'\n\nexport const sectionNames = {\n    RECOMMENDED_MOVIES: \"Recommend Movies\",\n    LATEST_MOVIES: \"Lastest Movies\",\n    TRENDING_MOVIES: \"Trending Movies\"\n}\n\nexport const COUNTRIES = [\n    \"United States\", \"France\", \"Canada\", \"Italy\", \"United Kingdom\", \"Russia\", \n    \"Korean\", \"Japan\", \"Hongkong\", \"China\", \"South Africa\", \"Brazil\"\n]","import * as genreApi from '../../api/genreApi'\nimport * as actionTypes from './actionTypes'\n\nexport function loadGenresSuccess(genres) {\n    return { type: actionTypes.LOAD_GENRES_SUCCESS, genres }\n}\n\nexport function loadGenres() {\n    return function(dispatch) {\n        return genreApi\n            .getGenres()\n            .then(res => {\n                dispatch(loadGenresSuccess(res.genres))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}","import { handleResponse, handleError } from \"./apiUtils\"\nimport { BASE_URL, GENRE_URL, API_KEY } from '../asset/GlobalData'\nimport axios from 'axios'\n\nexport function getGenres() {\n    let url = BASE_URL + GENRE_URL + API_KEY\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}","export const LOAD_GENRES_SUCCESS = \"LOAD_GENRES_SUCCESS\"\n\nexport const SET_TEXT_COLOR = \"SET_TEXT_COLOR\"\n\n// #region movie actions\nexport const LOAD_NOW_PLAYING_MOVIE_SUCCESS = \"LOAD_NOW_PLAYING_MOVIE_SUCCESS\"\nexport const LOAD_RECOMMENDED_MOVIE_SUCCESS = \"LOAD_RECOMMENDED_MOVIE_SUCCESS\"\n\nexport const LOAD_NOW_PLAYING = \"LOAD_NOW_PLAYING\"\nexport const LOAD_LATEST_MOVIES = \"LOAD_LATEST_MOVIES\"\nexport const LOAD_TRENDING_MOVIES = \"LOAD_TRENDING_MOVIES\"\n\n//#endregion","import React, { useState, useEffect } from 'react'\nimport { Navbar, NavbarToggler, Collapse, Nav, NavItem, NavLink, NavbarBrand, \n    UncontrolledDropdown, DropdownToggle, DropdownItem, DropdownMenu } from 'reactstrap'\nimport '../../css/NavBar.css'\nimport InputSearch from '../atoms/InputSearch'\nimport * as genreActions from '../../redux/actions/genreActions'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { COUNTRIES } from '../../asset/GlobalData'\n\nexport function NavBar(props) {\n    const [genreDropdownItems, setGenreDropdownItems] = useState([])\n    const [countryDropdownItems, setCountryDropdownItems] = useState([])\n    const countries = COUNTRIES\n\n    const [show, setShow] = useState({ ...props.showNav })\n    const [isTransparent, setIsTransparent] = useState({ ...props.isTransparent })\n    const [isOpen, setIsOpen] = useState(false)\n    const toggle = () => setIsOpen(!isOpen)\n\n    useEffect(() => {\n        setShow(props.showNav)\n    }, [props.showNav])\n\n    useEffect(() => {\n        setIsTransparent(props.isTransparent)\n    }, [props.isTransparent])\n\n    useEffect(() => {\n        props.actions.loadGenres()\n        let items = []\n        countries.map((country, index) => {\n            items.push(\n                <DropdownItem key={index}>\n                    {country}\n                </DropdownItem>\n            )\n        })\n        setCountryDropdownItems(items)\n    }, [])\n\n    useEffect(() => {\n        if (props.genres.length > 0) {\n            let items = []\n            props.genres.map((genre, index) => {\n                items.push(\n                    <DropdownItem key={index}>\n                        {genre.name}\n                    </DropdownItem>\n                )\n            })\n            setGenreDropdownItems(items)\n        }\n    }, [props.genres])\n\n    return (\n        <Navbar fixed=\"top\" expand=\"md\" className={ `${show ? 'nav-show' : 'nav-hide'} ${isTransparent ? 'transparent-nav' : 'non-transparent'}`}>\n            <NavbarBrand href=\"/\" className={props.textColor} >Home</NavbarBrand>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className={`mr-auto ${props.textColor}`} navbar>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Genre\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                            { genreDropdownItems }\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Country\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                           { countryDropdownItems }\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n                    <NavItem>\n                        <NavLink href=\"/latest\">Latest</NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href=\"/trending\">Trending</NavLink>\n                    </NavItem>\n                </Nav>\n                <NavItem className=\"input-search\">\n                    <InputSearch />\n                </NavItem>\n            </Collapse>\n        </Navbar>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres.length === 0 \n            ? [] \n            : state.genres,\n\n        textColor: state.navbar.textColor\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadGenres: bindActionCreators(genreActions.loadGenres, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)\n","import * as movieApi from '../../api/movieApi'\nimport * as actionTypes from './actionTypes'\n\nexport function loadNowPlayingMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_NOW_PLAYING_MOVIE_SUCCESS, movies }\n}\n\nexport function loadRecommendedMoviesSuccess(movies) {\n    return { type: actionTypes.LOAD_RECOMMENDED_MOVIE_SUCCESS, movies }\n}\n\nexport function loadNowPlayingMovies() {\n    return function(dispatch) {\n        return movieApi\n            .getNowPlayingMovies()\n            .then(res => {\n                let nowPlayingList = []\n                let recommendedList = []\n\n                // get 5 movie for movie carousel \n                if (res.results < 0) return\n                if (res.results.length > 5) {\n                    for (let i = 0; i < 5; i++) {\n                        nowPlayingList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        nowPlayingList.push(movie)\n                    }\n                }\n\n                // get 20 movies for recomended movie list\n                if (res.results.length > 20) {\n                    for (let i = 0; i < 20; i++) {\n                        recommendedList.push(res.results[i])\n                    }\n                } else {\n                    for(let movie of res.results) {\n                        recommendedList.push(movie)\n                    }\n                }\n\n                dispatch(loadNowPlayingMoviesSuccess(nowPlayingList))\n                dispatch(loadRecommendedMoviesSuccess(recommendedList))\n            })\n            .catch(error => {\n                console.error(error)\n                throw error\n            })\n    }\n}\n\nexport function loadRecommendedMovies() {\n    return function(dispatch) {\n        return \n            \n    }\n}\n","import { handleResponse, handleError } from \"./apiUtils\"\nimport { BASE_URL, NOW_PLAYING_URL, API_KEY } from '../asset/GlobalData'\nimport axios from 'axios'\n\nexport function getNowPlayingMovies() {\n    let url = BASE_URL + NOW_PLAYING_URL + API_KEY + \"&page=1\"\n    return axios.get(url)\n        .then(handleResponse)\n        .catch(handleError)\n}","import * as actionTypes from './actionTypes'\n\nexport function setTextColor(color) {\n    return { type: actionTypes.SET_TEXT_COLOR, color }\n}","import React, { useState, useEffect } from 'react'\nimport { Carousel, CarouselItem, CarouselControl, CarouselIndicators, CarouselCaption } from 'reactstrap'\nimport { POSTER_BASE_URL } from '../../asset/GlobalData'\nimport * as navbarActions from '../../redux/actions/navbarActions'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport '../../css/MovieCarousel.css'\n\nexport function MovieCarousel(props) {\n    const [activeIndex, setActiveIndex] = useState(0)\n    const [animating, setAnimating] = useState(false)\n    const [items, setItems] = useState([])\n    const [navbarTextColors, setNavbarTextColor] = useState([])\n\n    useEffect(() => {\n      if (props.nowPlaying) {\n        const newItems = []\n        props.nowPlaying.map((movie, index) => {\n          isImageDark(`${POSTER_BASE_URL}${movie.backdrop_path}`, index)\n          newItems.push({\n            src: `${POSTER_BASE_URL}${movie.backdrop_path}`,\n            altText: movie.original_title,\n            caption: movie.original_title,\n            overview: movie.overview,\n          })\n        })\n        setItems(newItems)\n        // console.log(newItems)\n      }\n    }, [props.nowPlaying])\n\n    useEffect(() => {\n      if (items.length > 0 && navbarTextColors.length > 0) {\n        if (navbarTextColors[activeIndex] !== props.textColor) {\n          if (props.textColor === 'dark') {\n            props.actions.setTextColor('light')\n          } else {\n            props.actions.setTextColor('dark')\n          }\n        } else {\n        }\n      }\n    }, [activeIndex])\n\n    const next = () => {\n        if (animating) return\n        const nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1\n        setActiveIndex(nextIndex)\n    }\n\n    const previous = () => {\n        if (animating) return\n        const nextIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1\n        setActiveIndex(nextIndex)\n    }\n\n    const goToIndex = (newIndex) => {\n        if (animating) return\n        setActiveIndex(newIndex)\n    }\n\n    const slides = items.map((item) => {\n        return (\n          <CarouselItem\n            onExiting={() => setAnimating(true)}\n            onExited={() => setAnimating(false)}\n            key={item.src}\n          >\n            <img src={item.src} alt={item.altText} />\n            <CarouselCaption className={props.textColor} captionText={item.overview} captionHeader={item.caption} />\n          </CarouselItem>\n        )\n    })\n\n    const isImageDark = function(imageSrc, index) {\n      var img = document.createElement(\"img\")\n      img.src = imageSrc\n      img.setAttribute('crossOrigin', '')\n      img.style.display = \"none\"\n      document.body.appendChild(img)\n  \n      var fuzzy = 0.1\n\n      img.onload = function() {\n          var canvas = document.createElement(\"canvas\")\n          canvas.width = this.width\n          canvas.height = this.height\n  \n          var ctx = canvas.getContext(\"2d\")\n          ctx.drawImage(this,0,0)\n  \n          var imageData = ctx.getImageData(0,0,canvas.width,canvas.height)\n          var data = imageData.data\n          var r,g,b, max_rgb\n            var light = 0, dark = 0\n  \n          for(var x = 0, len = data.length; x < len; x+=4) {\n              r = data[x]\n              g = data[x+1]\n              b = data[x+2]\n  \n              max_rgb = Math.max(Math.max(r, g), b)\n              if (max_rgb < 128)\n                  dark++\n              else\n                  light++\n          }\n\n          var dl_diff = ((light - dark) / (this.width * this.height))\n          if (dl_diff + fuzzy < 0) { //dark image\n            const newTextColors = [...navbarTextColors, navbarTextColors[index] = 'light']\n          } else { //light image\n            const newTextColors = [...navbarTextColors, navbarTextColors[index] = 'dark']\n          }\n      }\n  }\n\n  return (\n      <Carousel \n              activeIndex={activeIndex}\n              next={next}\n              previous={previous}\n          >\n\n          <CarouselIndicators items={items} activeIndex={activeIndex} onClickHandler={goToIndex} />\n              {slides}\n          <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous} />\n          <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next} />\n      </Carousel>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return {\n      nowPlaying: state.movies.nowPlaying.length === 0 \n          ? [] \n          : state.movies.nowPlaying,\n      textColor: state.navbar.textColor\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      setTextColor: bindActionCreators(navbarActions.setTextColor, dispatch)\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieCarousel)","import React from 'react'\n\nexport default function SectionHeading(props) {\n    const styles = {\n        sectionTitle: {\n            'margin': '2rem 0 0 0'\n        },\n    }\n\n    return (\n        <div className=\"section-heading\">\n            <h2 className=\"section-title\" style={styles.sectionTitle}>{props.sectionTitle}</h2>\n        </div>\n    )\n}\n","import React from 'react'\nimport { TiInfoLarge, TiStar } from \"react-icons/ti\"\nimport { MOVIE_IMAGE_URL } from '../../asset/GlobalData'\nimport '../../css/MovieCard.css'\nimport { connect } from 'react-redux'\n\nexport function MovieCard(props) {\n    const getGenreNamesFromIds = (genreIds) => {\n        let genreNames = []\n        props.genres.map(genre => {\n            for(let genreId of genreIds) {\n                if (genre.id === genreId) {\n                    genreNames.push(genre.name)\n                }\n            }\n        })\n        genreNames = genreNames.join(', ')\n        return genreNames\n    }\n\n    return (\n        <div className=\"card-container\">\n            <div className=\"image-card\">\n                <img className=\"movie-img\" src={MOVIE_IMAGE_URL + props.movie.poster_path} alt={props.movie.title}/>\n                <div className=\"movie-info\">\n                    <TiInfoLarge color=\"#fff\" />\n                    <div className=\"info-text\">\n                        <h3 className=\"title\">{props.movie.title}</h3>\n                        <p className=\"overview\">{props.movie.overview}</p>\n                        <p className=\"genre\">{\"Genre: \" + getGenreNamesFromIds(props.movie.genre_ids)}</p>\n                        <p className=\"release-date\">{props.movie.release_date}</p>\n                        <p className=\"rate\">\n                            <TiStar color=\"yellow\" size={22} />\n                            {props.movie.vote_average}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        genres: state.genres\n    }\n}\n\nexport default connect(mapStateToProps)(MovieCard)\n","import React, { useState, useEffect } from 'react'\nimport MovieCard from '../atoms/MovieCard'\n\nexport default function MovieList(props) {\n    const movieCards = props.movieList.map(movie => (\n        <MovieCard key={movie.id} movie={movie}/>\n    ))\n\n    return (\n        <div className=\"movie-list\">\n            { movieCards }\n        </div>\n    )\n}\n","import React, { useState ,useEffect } from 'react'\nimport SectionHeading from '../atoms/SectionHeading'\nimport MovieList from '../molecules/MovieList'\nimport { Container, Row, Col } from 'reactstrap'\n\nimport { sectionNames } from '../../asset/GlobalData'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport '../../css/MovieSection.css'\n\nexport function MovieSection(props) {\n    const [title, setTitle] = useState(\"\")\n    const [movies, setMovies] = useState([])\n\n    useEffect(() => {\n        setTitle(props.sectionName)\n        switch(props.sectionName) {\n            case sectionNames.RECOMMENDED_MOVIES:\n                setMovies(props.recommended)\n            break\n\n            case sectionNames.LATEST_MOVIES:\n            break\n\n            case sectionNames.TRENDING_MOVIES:\n            break\n        }\n    }, [props.recommended])\n\n    return (\n        <Container className=\"movie-section\">\n            <div>\n                <SectionHeading sectionTitle={title}/>\n            </div>\n            <div>\n                <MovieList movieList={movies} />\n            </div>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        recommended: state.movies.recommendedMovies.length === 0 \n            ? [] \n            : state.movies.recommendedMovies\n    }\n}\n  \nfunction mapDispatchToProps(dispatch) {\nreturn {\n    actions: {\n\n    }\n}\n}\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(MovieSection)","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as movieActions from '../../redux/actions/movieActions'\nimport { sectionNames } from '../../asset/GlobalData'\nimport MovieCarousel from '../atoms/MovieCarousel'\nimport MovieSection from '../organisms/MovieSection'\nimport { Container, Row } from 'reactstrap'\nimport '../../css/Home.css'\n\nexport function Home(props) {\n    useEffect(() => {\n        props.actions.loadNowPlayingMovies()\n    }, [])\n\n    return (\n        <Container>\n            <Row>\n                <MovieCarousel />\n            </Row>\n            <Row>\n                <MovieSection sectionName={sectionNames.RECOMMENDED_MOVIES} />\n            </Row>\n        </Container>\n    )\n}\n\nfunction mapStateToProps(state) {\n    return {\n        nowPlaying: state.movies.nowPlaying.length === 0 \n            ? [] \n            : state.movies.nowPlaying\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            loadNowPlayingMovies: bindActionCreators(movieActions.loadNowPlayingMovies, dispatch)\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React from 'react'\n\nexport default function MovieDetails() {\n    return (\n        <div>\n            Movie Detail\n        </div>\n    )\n}\n","import React from 'react'\nimport { Container } from 'reactstrap'\n\nexport default function LatestMovies() {\n    return (\n        <Container className=\"pages\">\n            Lastest movie\n        </Container>\n    )\n}\n","import React from 'react'\n\nexport default function TrendingMovies() {\n    return (\n        <div>\n            Trending movies\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport './css/App.css'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Navbar from './components/commons/NavBar'\nimport Home from './components/pages/Home'\nimport MovieDetails from './components/pages/MovieDetails'\nimport LatestMovies from './components/pages/LatestMovies'\nimport TrendingMovies from './components/pages/TrendingMovies'\n\n// axios.defaults.baseURL = 'https://...'\nfunction App() {\n  const [showNav, setShowNav] = useState(true)\n  const [transparentNav, setTransparentNav] = useState(true)\n  const [scrolledPosition, setSrolledPosition] = useState(0)\n  const [carouselHeight, setCarouselHeight] = useState(0)\n\n  const handleScroll = () => {\n    const currentPosition = window.pageYOffset\n\n    if (carouselHeight <= 0 ) {\n      const height = document.querySelector('.carousel').clientHeight\n      setCarouselHeight(height)\n    }\n\n    // show/hide navbar when scroll\n    if (scrolledPosition > currentPosition) {\n      setShowNav(true)\n    } else {\n      setShowNav(false)\n    }\n\n    // make change navbar background when carousel is not in view port\n    if (currentPosition > carouselHeight) {\n      setTransparentNav(false)\n    } else {\n      setTransparentNav(true)\n    }\n\n    setSrolledPosition(currentPosition)\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll)\n    }\n  })\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar showNav={showNav} isTransparent={transparentNav} />\n        <Switch>\n          <Route path=\"/latest\" component={LatestMovies} />\n          <Route path=\"/trending\" component={TrendingMovies} />\n          <Route path=\"/details\" component={MovieDetails} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    nowPlaying: [],\n    searchMovies: [],\n    recommendedMovies: [],\n    latestMovies: [],\n    trendingMovies: [],\n}\n\nexport default function movieReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.LOAD_NOW_PLAYING_MOVIE_SUCCESS: \n            return { ...state, nowPlaying: action.movies }\n        case actionTypes.LOAD_RECOMMENDED_MOVIE_SUCCESS:\n            return { ...state, recommendedMovies: action.movies }\n        case actionTypes.LOAD_LATEST_MOVIES:\n            return { ...state, latestMovies: action.latestMovies }\n        case actionTypes.LOAD_TRENDING_MOVIES:\n            return { ...state, trendingMovies: action.trendingMovies }\n        default:\n            return state\n    }\n}","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    textColor: 'dark'\n}\n\nexport default function navbarReducer(state = initialState, action) {\n    switch(action.type) {\n        case actionTypes.SET_TEXT_COLOR: \n            return { textColor: action.color }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport genres from './genreReducer'\nimport movies from './movieReducer'\nimport navbar from './navbarReducer'\n\nconst rootReducer = combineReducers({\n    genres,\n    movies,\n    navbar\n})\n\nexport default rootReducer","import * as actionTypes from '../actions/actionTypes'\n\nexport default function genreReducer(state = [], action) {\n    switch(action.type) {\n        case actionTypes.LOAD_GENRES_SUCCESS: \n            return action.genres\n        default:\n            return state\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './redux/configureStore'\nimport { Provider as ReduxProvider } from 'react-redux'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ReduxProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, compose } from 'redux'\nimport rootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport { applyMiddleware } from 'redux'\n\nexport default function configureStore(initialState) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n    return createStore(\n        rootReducer,\n        initialState,\n        composeEnhancers(applyMiddleware(thunk))\n    )\n} "],"sourceRoot":""}